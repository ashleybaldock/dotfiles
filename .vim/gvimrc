
if empty(&guitablabel)
  set guitablabel=%M%t
endif

" Send print jobs to Preview.app.  The user can then print from it.
set printexpr=macvim#PreviewConvertPostScript()

" askpass
let $SSH_ASKPASS = simplify($VIM . '/../../Resources') . '/macvim-askpass'
let $SUDO_ASKPASS = $SSH_ASKPASS


DynamicToolBar


" Remove unwanted bits of menu
" TODO

" Unbind default command key mappings for other uses
" (Commented entries are unaltered from menu.vim)
"
" See: $VIMRUNTIME/menu.vim

"  <D-n>
" macm File.New\ Window                             key=<Nop>
"  <D-N>
" macm File.New\ Clean\ Window                      key=<Nop>
"  <D-M-N>
" macm File.New\ Clean\ Window\ (No\ Defaults)      key=<Nop>

"                                                             - Unbind <D-t>
macm File.New\ Tab                                key=<Nop>

"                                                             - Unbind <D-o>
macm File.Open…                                   key=<Nop>

"                                                             - Unbind <D-T>
macm File.Open\ Tab\.\.\.<Tab>:tabnew             key=<Nop>

" macm File.Open\ Recent
"  <D-W>
" macm File.Close\ Window<Tab>:qa                 key=<Nop>
" macm File.Close                                 key=<Nop>
"  <D-s>
" macm File.Save<Tab>:w                           key=<Nop>
"  <D-M-s>
" macm File.Save\ All                             key=<Nop>
"  <D-S>
" macm File.Save\ As…<Tab>:sav                    key=<Nop>

"                                                             - Unbind <D-p> -
macm File.Print                                   key=<Nop>

"                                                             - Unbind <D-z>
macm Edit.Undo<Tab>u                              key=<Nop>
"                                                             - Unbind <D-Z>
macm Edit.Redo<Tab>^R                             key=<Nop>

" " key=<D-x>
" macm Edit.Cut<Tab>"+x                           key=<Nop>
" " key=<D-c>
" macm Edit.Copy<Tab>"+y                          key=<Nop>

"  <D-v>
" macm Edit.Paste<Tab>"+gP                        key=<Nop>

"  <D-a>
" macm Edit.Select\ All<Tab>ggVG                  key=<Nop>

"                                                             - Unbind <D-f>
macm Edit.Find.Find…                              key=<Nop>

"                                                             - Unbind <D-g>
macm Edit.Find.Find\ Next                         key=<Nop>

"                                                             - Unbind <D-G>
macm Edit.Find.Find\ Previous                     key=<Nop>

"                                                             - Unbind <D-e>
macm Edit.Find.Use\ Selection\ for\ Find          key=<Nop>

" macm Edit.Font.Show\ Fonts
"                                                             - Unbind <D-=>
macm Edit.Font.Bigger                             key=<Nop>
"                                                             - Unbind <D-->
macm Edit.Font.Smaller                            key=<Nop>
"                                                             - Unbind <D-;>
macm Tools.Spelling.To\ Next\ Error<Tab>]s        key=<Nop>
"                                                             - Unbind <D-:>
macm Tools.Spelling.Suggest\ Corrections<Tab>z=   key=<Nop>
"                                                             - Unbind <D-b>
macm Tools.Make<Tab>:make                         key=<Nop>
"                                                             - Unbind <D-l>
macm Tools.List\ Errors<Tab>:cl                   key=<Nop>
"                                                             - Unbind <D-C-Right>
macm Tools.Next\ Error<Tab>:cn                    key=<Nop>
"                                                             - Unbind <D-C-Left>
macm Tools.Previous\ Error<Tab>:cp                key=<Nop>
"                                                             - Unbind <D-C-Up>
macm Tools.Older\ List<Tab>:cold                  key=<Nop>
"                                                             - Unbind <D-C-Down>
macm Tools.Newer\ List<Tab>:cnew                  key=<Nop>

"  <D-m>
" macm Window.Minimize                            key=<Nop
"  <D-M-m>
" macm Window.Minimize\ All                       key=<Nop>
"  <D-C-z>
" macm Window.Zoom                                key=<Nop>
"  <D-M-C-z>
" macm Window.Zoom\ All                           key=<Nop>
"                                                             - Unbind <D-C-f>
macm Window.Toggle\ Full\ Screen\ Mode            key=<Nop>
"                                                             - Unbind <D-}>
macm Window.Show\ Next\ Tab                       key=<Nop>
"                                                             - Unbind <D-{>
macm Window.Show\ Previous\ Tab                   key=<Nop>
" macm Window.Bring\ All\ To\ Front
" macm Window.Stay\ in\ Front
" macm Window.Stay\ in\ Back
" macm Window.Stay\ Level\ Normal

"                                                             - Unbind <D-?>
macm Help.MacVim\ Help                            key=<Nop>
" macm Help.MacVim\ Website
" macm Help.What's\ New


" ------------------------------------ Add new or replacement bindings for ⌘⃣  --

"                                                             - Bind <D-C>
nnoremenu 20.355 Edit.Copy\ All<Tab>ggVG"+y       ggVG"+y
macm Edit.Copy\ All                               key=<D-C>

"                                                             - Bind <D-V>
an 20.360 &Edit.&Paste\ VSplit<Tab>^Wv"+gP        <C-W>v"+gP
macm Edit.Paste\ VSplit                           key=<D-V>

"                                                             - Bind <D-t>
nmap <D-t> :sp .<CR>

" commenting
" toggle current line                                         - Bind <D-/>
nmap <D-/> gc
" toggle current visual selection                             - Bind <D-/>
xmap <D-/> gc
" current line:                                               - Bind <D-M-/>
"  is comment: uncomment surrounding block
"  else: comment line
nmap <D-M-/> gcgc



" HIG Cmd and Option movement mappings 
if has("gui_macvim")
" ▌️⌘️ 􁾱  ▐️────▷ Move to ends
  noremap   <D-Up>     <C-Home>
  noremap   <D-Right>  <End>
  noremap!  <D-Right>  <End>
  noremap   <D-Down>   <C-End>
  noremap   <D-Left>   <Home>
  noremap!  <D-Left>   <Home>

  inoremap  <D-BS>         <C-u>
" ▌️⌘️ 􁾲  ▐️────▷ Jump to top of PUM
  inoremap <expr> <D-Up>     pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-Home>"
" ▌️⌘️ 􁾵  ▐️────▷ Accept selection + exit PUM
  inoremap <expr> <D-Right>     pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-Home>"
" ▌️⌘️ 􁾳  ▐️────▷ Jump to end of PUM
  inoremap <expr> <D-Down>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-End>"
" ▌️⌘️ 􁾴  ▐️────▷ Cancel out of PUM
  inoremap <expr> <D-Left>     pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-Home>"

" ▌️⌥️ 􁾱  ▐️────▷ Move in steps
  noremap <M-Up> {
  noremap <M-Right> <C-Right>
  noremap! <M-Right> <C-Right>
  noremap <M-Down> }
  noremap <M-Left> <C-Left>
  noremap! <M-Left> <C-Left>

  inoremap <M-BS> <C-w>

" ▌️⌥️ 􁾲  ▐️────▷ Jump up a page in PUM listing
  inoremap <expr> <M-Up> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-o>"
" ▌️⌥️ 􁾵  ▐️────▷ Select part of path in PUM + prompt for next part
  inoremap <expr> <M-Right> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-Home>"
" ▌️⌥️ 􁾳  ▐️────▷ Jump down a page in PUM listing
  inoremap <expr> <M-Down> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-End>"
" ▌️⌥️ 􁾴  ▐️────▷ Jump up a level in path, and reselect
  inoremap <expr> <M-Left> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-o>}"
endif

" ^X  open
" ^P  prev (preview inline)
" ^N  next (preview inline)
" ^Y  accept
" ^E  cancel



" if has("gui_macvim")
  " Shift + special movement key (<S-Left>, etc.) and mouse starts insert mode
  " set selectmode=mouse,key
  " set keymodel=startsel,stopsel

  " nn   <S-D-Left>     <S-Home>
  " vn   <S-D-Left>     <S-Home>
  " ino  <S-D-Left>     <S-Home>
  " nn   <S-M-Left>     <S-C-Left>
  " vn   <S-M-Left>     <S-C-Left>
  " ino  <S-M-Left>     <S-C-Left>

  " nn   <S-D-Right>    <S-End>
  " vn   <S-D-Right>    <S-End>
  " ino  <S-D-Right>    <S-End>
  " nn   <S-M-Right>    <S-C-Right>
  " vn   <S-M-Right>    <S-C-Right>
  " ino  <S-M-Right>    <S-C-Right>

  " nn   <S-D-Up>       <S-C-Home>
  " vn   <S-D-Up>       <S-C-Home>
  " ino  <S-D-Up>       <S-C-Home>

  " nn   <S-D-Down>     <S-C-End>
  " vn   <S-D-Down>     <S-C-End>
  " ino  <S-D-Down>     <S-C-End>
" endif

