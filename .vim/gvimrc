

" function! s:MenuBuild()
"   call popup_notification("      üôà üôâ üôä", #{ line: 2, col: 10, highlight: 'ToolbarLine', time: 2000} )
" endfunc

" function! s:TestMenu()
"   nunmenu WinBar
"   nnoremenu 1.10 WinBar.‚ÄºÔ∏è\     :
"   nnoremenu 1.20 WinBar.üî∂     :
"   nnoremenu 1.30 WinBar.üåà     :
"   nnoremenu 1.40 WinBar.üêµ     :call s:MenuBuild()
"   nnoremenu 1.50 WinBar.üçÜ     :
" endfunc

" command! TestMenu :call <SID>TestMenu()

 " TODO
 "
 " states = { current: [next, tooltip, icon] }
function! s:ToolBarToggle(priority, name, states)
  if exists('+'..a:name)
    exec 'let value = '..a:name
    let state = get(states, value, get(states, '*', []))
    let nextvalue = state[0]
    let tooltip = state[1]
    let icon = state[2]
    if nextvalue
      exec 'an icon='..icon..' '..a:priority..' ToolBar.Toggle\ '..a:name..' :setlocal '..nextvalue
      exec 'tmenu ToolBar.Toggle\ '..a:name..' '..tooltip
    else
      exec 'an icon=exclamationmark.square '..a.priority..' ToolBar.Toggle\ '..a:name..' <Nop>'
      exec 'tmenu ToolBar.Toggle\ '..a:name..' ToolBarToggle:Err: No matching state and fallback missing'
    endif
  else
    exec 'an icon=questionmark.square.dashed '..a.priority..' ToolBar.Toggle\ '..a:name..' <Nop>'
    echom 'ToolBarToggle:Err: Setting "'..a:name..'" does not exist'
  endif
endfunc

" SF icons can be suffixed with:
" :monochrome
" :hierarchical
" :palette
" :multicolor
" :variable-[0..1]
function! s:ObsessionTBStatus()
  silent! aunmenu ToolBar.ObsessionStatus

  if exists("g:loaded_obsession")
    let obstatus = ObsessionStatus('active','paused')

    if obstatus == 'active'
      an icon=gear.badge.checkmark 1.10 ToolBar.ObsessionStatus :Obsession<CR>
      tmenu ToolBar.ObsessionStatus Obsessing, click to pause
    elseif obstatus == 'paused'
      an icon=gear.badge.xmark:hierarchical 1.10 ToolBar.ObsessionStatus :Obsession<CR>
      tmenu ToolBar.ObsessionStatus Obsession paused, click to resume
    else
      an icon=gear.badge.questionmark:hierarchical 1.10 ToolBar.ObsessionStatus :NewObsession<space>
      tmenu ToolBar.ObsessionStatus No Session, click to create one
    endif
  else
    an icon=gear 1.10 ToolBar.ObsessionStatus <Nop>
    amenu disable ToolBar.ObsessionStatus
    tmenu ToolBar.ObsessionStatus Obsession not loaded.
  endif
endfunc

function! s:RemoveDefaultToolBar()
  aunmenu ToolBar.-sep1-
  aunmenu ToolBar.-sep2-
  aunmenu ToolBar.-sep7-
  aunmenu ToolBar.Open
  aunmenu ToolBar.Save
  aunmenu ToolBar.SaveAll
  aunmenu ToolBar.Print
  aunmenu ToolBar.Undo
  aunmenu ToolBar.Redo
  aunmenu ToolBar.Cut
  aunmenu ToolBar.Copy
  aunmenu ToolBar.Paste
  aunmenu ToolBar.RunScript
  aunmenu ToolBar.Make
  aunmenu ToolBar.Help
  aunmenu ToolBar.SaveSesn
  aunmenu ToolBar.LoadSesn

  " an ToolBar.WinClose <Nop>
  " an ToolBar.WinMax <Nop>
  " an ToolBar.WinMin <Nop>
  " an ToolBar.WinSplit <Nop>
  " an ToolBar.WinVSplit <Nop>
  " an ToolBar.WinMaxWidth <Nop>
  " an ToolBar.WinMinWidth <Nop>
endfunc

function! s:DividerBetweenStatusAndActions()
  an ToolBar.-flexspace1a-       <Nop>
  " an ToolBar.-space1a-          <Nop>
  " an ToolBar.-space1b-          <Nop>
  an icon=poweron ToolBar.Sep1  <Nop>
  amenu disable ToolBar.Sep1
  an ToolBar.-flexspace1b-       <Nop>
endfunc
function! s:DividerBetweenActionsAndToggles()
  " an ToolBar.-space2a-          <Nop>
  an ToolBar.-flexspace2a-       <Nop>
  an icon=poweron ToolBar.Sep2  <Nop>
  amenu disable ToolBar.Sep2
  an ToolBar.-flexspace2b-       <Nop>
  " an ToolBar.-space2b-          <Nop>
endfunc

function! s:AddDynamicToolBar()
  " Status indicators
  call s:ObsessionTBStatus()

  " Actions
  call s:DividerBetweenStatusAndActions()

  an <silent> icon=arrow.rectanglepath
        \ ToolBar.Reload\ Pane                  <Nop>
  tmenu ToolBar.Reload\ Pane Reload current pane

  an <silent> icon=gearshape.arrow.triangle.2.circlepath 
        \ ToolBar.Reload\ Config                <Nop>
  tmenu ToolBar.Reload\ Config Reload config

  an <silent> icon=paintpalette
        \ ToolBar.Reload\ Colorscheme           :colorscheme vividmayhem
  tmenu ToolBar.Reload\ Colorscheme Reload Colourscheme

  an <silent> icon=terminal
        \ ToolBar.Terminal                      :terminal
  tmenu ToolBar.Terminal Open Terminal window in split

  an <silent> icon=folder
        \ ToolBar.Show\ In\ Finder              <Nop>
  tmenu ToolBar.Show\ In\ Finder Show current file in Finder

  " Toggles
  call s:DividerBetweenActionsAndToggles()

  an icon=cursorarrow.and.square.on.square.dashed
        \ ToolBar.Toggle\ Virtualedit           :let &g:virtualedit='block'<CR>
  tmenu ToolBar.Toggle\ Virtualedit             Toggle virtualedit

        " \ ['all', '', 'Turn delcombine off', 'delete.left.fill'],
        " \ ['none', '0', 'Turn delcombine off', 'delete.left.fill'],
        " \ ['onemore', '0', 'Turn delcombine off', 'delete.left.fill'],
  call s:ToolBarToggle('600.10', '&g:virtualedit', {
        \ 'block': ['block',  'insert', 'Virtualedit:  Off [Block]‚ñπInsert ', 'cursorarrow.and.square.on.square.dashed'],
        \ 'insert': ['insert', 'none',   'Virtualedit: ‚ñπOff  Block [Insert]', 'filemenu.and.cursorarrow'],
        \ 'none': ['none',   'block',  'Virtualedit: [Off]‚ñπBlock  Insert', 'dots.and.line.vertical.and.cursorarrow.rectangle'],
        \ '*': ['',       'block',  'Virtualedit:  Off ‚ñπBlock  Insert [???]', 'dots.and.line.vertical.and.cursorarrow.rectangle'],
        \ })
    " amenu disable ToolBar.ObsessionStatus
    " :hierarchical
  call s:ToolBarToggle('600.20', '&g:delcombine', {
        \ '0': ['1', 'Turn delcombine on', 'delete.left'],
        \ '1': ['0', 'Turn delcombine off', 'delete.left.fill'],
        \ })
  " an <silent> icon=delete.left.fill
  "       \ ToolBar.Toggle\ DelCombine            :setlocal nodelcombine
  " tmenu ToolBar.Toggle\ DelCombine              Turn delcombine off
  " an <silent> icon=delete.left
  "       \ ToolBar.Toggle\ DelCombine            :setlocal delcombine
  " tmenu ToolBar.Toggle\ DelCombine              Turn delcombine on

  an ToolBar.-flexspace5-        <Nop>

endfunc


augroup DynamicToolbar
  autocmd User Obsession call s:ObsessionTBStatus() | redraw!
  autocmd SessionLoadPost * call s:ObsessionTBStatus() | redraw!
augroup END

if !exists("g:mayhem_did_toolbar_init")
  let g:mayhem_did_toolbar_init = 1

  call s:RemoveDefaultToolBar()

  call s:AddDynamicToolBar()

  " call UpdateDynamicToolBar(0)
endif

