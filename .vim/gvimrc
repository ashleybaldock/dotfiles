
if empty(&guitablabel)
  set guitablabel=%M%t
endif

" Send print jobs to Preview.app.  The user can then print from it.
set printexpr=macvim#PreviewConvertPostScript()

" askpass
let $SSH_ASKPASS = simplify($VIM .. '/../../Resources') .. '/macvim-askpass'
let $SUDO_ASKPASS = $SSH_ASKPASS


DynamicToolBar


" Remove unwanted bits of menu
" TODO

" Unbind default command key mappings for other uses
" (Commented entries are unaltered from menu.vim)
"
" See: $VIMRUNTIME/menu.vim
"      $VIMRUNTIME/../../Actions.plist

"  <D-n>
" macm File.New\ Window                             key=<Nop>
"  <D-N>
" macm File.New\ Clean\ Window                      key=<Nop>
"  <D-M-N>
" macm File.New\ Clean\ Window\ (No\ Defaults)      key=<Nop>

"                                                             - Unbind <D-t>
macm File.New\ Tab                                key=<Nop>

"                                                             - Unbind <D-o>
macm File.Open…                                   key=<Nop>

"                                                             - Unbind <D-T>
macm File.Open\ Tab\.\.\.<Tab>:tabnew             key=<Nop>

" macm File.Open\ Recent
"  <D-W>
" macm File.Close\ Window<Tab>:qa                 key=<Nop>
" macm File.Close                                 key=<Nop>
"  <D-s>
" macm File.Save<Tab>:w                           key=<Nop>
"  <D-M-s>
" macm File.Save\ All                             key=<Nop>
"  <D-S>
" macm File.Save\ As…<Tab>:sav                    key=<Nop>

"                                                             - Unbind <D-p> -
macm File.Print                                   key=<Nop>

"                                                             - Unbind <D-z>
macm Edit.Undo<Tab>u                              key=<Nop>
"                                                             - Unbind <D-Z>
macm Edit.Redo<Tab>^R                             key=<Nop>

" " key=<D-x>
" macm Edit.Cut<Tab>"+x                           key=<Nop>
" " key=<D-c>
" macm Edit.Copy<Tab>"+y                          key=<Nop>

"  <D-v>
" macm Edit.Paste<Tab>"+gP                        key=<Nop>

"  <D-a>
" macm Edit.Select\ All<Tab>ggVG                  key=<Nop>

"                                                             - Unbind <D-f>
macm Edit.Find.Find…                              key=<Nop>

"                                                             - Unbind <D-g>
macm Edit.Find.Find\ Next                         key=<Nop>

"                                                             - Unbind <D-G>
macm Edit.Find.Find\ Previous                     key=<Nop>

"                                                             - Unbind <D-e>
macm Edit.Find.Use\ Selection\ for\ Find          key=<Nop>

" macm Edit.Font.Show\ Fonts
"                                                             - Unbind <D-=>
macm Edit.Font.Bigger                             key=<Nop>
"                                                             - Unbind <D-->
macm Edit.Font.Smaller                            key=<Nop>
"                                                             - Unbind <D-;>
macm Tools.Spelling.To\ Next\ Error<Tab>]s        key=<Nop>
"                                                             - Unbind <D-:>
macm Tools.Spelling.Suggest\ Corrections<Tab>z=   key=<Nop>
"                                                             - Unbind <D-b>
macm Tools.Make<Tab>:make                         key=<Nop>
"                                                             - Unbind <D-l>
macm Tools.List\ Errors<Tab>:cl                   key=<Nop>
"                                                             - Unbind <D-C-Right>
macm Tools.Next\ Error<Tab>:cn                    key=<Nop>
"                                                             - Unbind <D-C-Left>
macm Tools.Previous\ Error<Tab>:cp                key=<Nop>
"                                                             - Unbind <D-C-Up>
macm Tools.Older\ List<Tab>:cold                  key=<Nop>
"                                                             - Unbind <D-C-Down>
macm Tools.Newer\ List<Tab>:cnew                  key=<Nop>

"  <D-m>
" macm Window.Minimize                            key=<Nop
"  <D-M-m>
" macm Window.Minimize\ All                       key=<Nop>
"  <D-C-z>
" macm Window.Zoom                                key=<Nop>
"  <D-M-C-z>
" macm Window.Zoom\ All                           key=<Nop>
"                                                             - Unbind <D-C-f>
macm Window.Toggle\ Full\ Screen\ Mode            key=<Nop>
"                                                             - Unbind <D-}>
macm Window.Show\ Next\ Tab                       key=<Nop>
"                                                             - Unbind <D-{>
macm Window.Show\ Previous\ Tab                   key=<Nop>
" macm Window.Bring\ All\ To\ Front
" macm Window.Stay\ in\ Front
" macm Window.Stay\ in\ Back
" macm Window.Stay\ Level\ Normal

"                                                             - Unbind <D-?>
macm Help.MacVim\ Help                            key=<Nop>
" macm Help.MacVim\ Website
" macm Help.What's\ New


" ------------------------------------ Add new or replacement bindings for ⌘⃣  --

"                                                             - Bind <D-C>
nnoremenu 20.355 Edit.Copy\ All<Tab>ggVG"+y       ggVG"+y
macm Edit.Copy\ All                               key=<D-C>

"                                                             - Bind <D-V>
an 20.360 &Edit.&Paste\ VSplit<Tab>^Wv"+gP        <C-W>v"+gP
macm Edit.Paste\ VSplit                           key=<D-V>

"                                                             - Bind <D-t>
nmap <D-t> :sp .<CR>

" commenting
" toggle current line                                         - Bind <D-/>
nmap <D-/> gc
" toggle current visual selection                             - Bind <D-/>
xmap <D-/> gc
" current line:                                               - Bind <D-M-/>
"  is comment: uncomment surrounding block
"  else: comment line
nmap <D-M-/> gcgc


"
" Add items to File menu
"

an <silent> 10.327.100 &File.Open\ Related.Runtime\ Syntax	    <Nop>
an <silent> 10.327.110 &File.Open\ Related.Runtime\ FT\ Plugin	    <Nop>
an <silent> 10.327.120 &File.Open\ Related.Runtime\ Plugin	    <Nop>
an <silent> 10.327.130 &File.Open\ Related.Runtime\ Autoload	    <Nop>


"
" Extra Tools Menu:
"
"􀥖􀩉􀥗􀩊􀥘
" aunmenu Tools2
exec 'an' SfIcon('􀅌') '100.310.100' 'Tools2.􀽴\ \ Columns.Transpose'
      \ '<Cmd>TransposeRowCol<CR>'
an 100.310.200 Tools2.􀽴\ \ Columns.-sep1-	<Nop>
exec 'an' SfIcon('􀩊') '100.310.210' 'Tools2.􀽴\ \ Columns.Align\ Right'
      \ '<Cmd>ColAlignRight<CR>'
exec 'an' SfIcon('􀅆') '100.310.214' 'Tools2.􀽴\ \ Columns.Align\ Right\ To\ Col'
      \ '<Cmd>AlignRightToColorColumn<CR>'
exec 'an' '100.310.216' 'Tools2.􀽴\ \ Columns.Align\ Right\ To\ Cursor'
      \ '<Cmd>AlignRightToCursor<CR>'
exec 'an' '100.310.218' 'Tools2.􀽴\ \ Columns.Align\ Right'
      \ '<Cmd>ColAlignRight<CR>'
exec 'vunmenu' 'Tools2.􀽴\ \ Columns.Align\ Right'
exec 'vnoremenu <silent>' 'Tools2.􀽴\ \ Columns.Align\ Right'
      \ '<Cmd>ColAlignRight<CR>'
an 100.310.300 Tools2.􀽴\ \ Columns.-sep2-	<Nop>
exec 'an' SfIcon('􀩈') '100.310.320' 'Tools2.􀽴\ \ Columns.Align\ Left'
      \ '<Cmd>ColAlignLeft<CR>'
exec 'an' SfIcon('􀅅') '100.310.324' 'Tools2.􀽴\ \ Columns.Align\ Left\ To\ Col'
      \ '<Cmd>AlignLeftToColorColumn<CR>'
exec 'an' '100.310.326' 'Tools2.􀽴\ \ Columns.Align\ Left\ To\ Cursor'
      \ '<Cmd>AlignLeftToCursor<CR>'
exec 'an' '100.310.328' 'Tools2.􀽴\ \ Columns.Align\ Left\ To'
      \ '<Cmd>AlignLeftToCursor<CR>'
an 100.310.400 Tools2.􀽴\ \ Columns.-sep3-	<Nop>
exec 'an' SfIcon('􀩉') '100.310.430' 'Tools2.􀽴\ \ Columns.Align\ Center'
      \ '<Cmd>ColAlignCenter<CR>'

an 100.400 Tools2.-sep1-	<Nop>

an 100.400.210 Tools2.Sort.Words	<Cmd>SortWords<CR>
an 100.400.220 Tools2.Sort.Lines	<Cmd>SortLines<CR>

an 100.500 Tools2.-sep2-	<Nop>

exec 'an' SfIcon('􁂸') '100.510.100' 'Tools2.􀆃\ \ Colour\ Highlighting.Off'
      \ '<Cmd>call ColourHighlightOff()<CR>'
exec 'an' SfIcon('􁂸') '100.510.140' 'Tools2.􀆃\ \ Colour\ Highlighting.Text\ Contrast'
      \ '<Cmd>call ColourHighlightTextContrast()<CR>'
exec 'an' SfIcon('􀏄') '100.510.160' 'Tools2.􀆃\ \ Colour\ Highlighting.Text\ Hidden'
      \ '<Cmd>call ColourHighlightTextHidden()<CR>'
exec 'an' SfIcon('􁂷') '100.510.180' 'Tools2.􀆃\ \ Colour\ Highlighting.Text\ Only'
      \ '<Cmd>call ColourHighlightTextOnly()<CR>'
exec 'an' SfIcon('􀃪') '100.510.200' 'Tools2.􀆃\ \ Colour\ Highlighting.Virtual\ Text'
      \ '<Cmd>call ColourHighlightTextOnly()<CR>'
  
exec 'an' SfIcon=('􁙧') '100.520.130' 'Tools2.Hi\ Hi'
      \ '<Cmd>HiHi<CR>'
exec 'an' '100.530.130' 'Tools2.Enable\ Syntax\ Reload\ On\ Write'
      \ '<Cmd>au BufWritePost <buffer> syn on<CR>'

an 100.600 Tools2.-sep3-	<Nop>
exec 'an' SfIcon('􀲳') '100.630.130' 'Tools2.SynFo.Toggle\ In\ Current\ Window'
      \ '<Cmd>SynFoWindowToggle<CR>'
macm Tools2.SynFo.Toggle\ In\ Current\ Window key=<D-I>
" an 100.530.150 Tools2.SynFo.Enable\ In\ Current\ Window <Cmd>SynFoWindowOn<CR>
" an 100.530.150 Tools2.SynFo.Disable\ In\ Current\ Window <Cmd>SynFoWindowOff<CR>
an 100.530.170 Tools2.SynFo.Disable\ In\ All\ Windows	<Cmd>SynFoAllOff<CR>
" macm Tools2.SynFo.Disable\ In\ All\ Windows
an 100.530.200 Tools2.SynFo.-sep1-		<Nop>
an 100.530.230 Tools2.SynFo.Show\ At\ Cursor	<Cmd>SynFo<CR>
macm Tools2.SynFo.Show\ At\ Cursor key=<D-i>

an 100.600 Tools2.-sep4-	<Nop>
an 100.650.100 Tools2.Auto\ Format	<Cmd>call FormatBuffer()<CR>
"
" 􂠺  􂠸    􁘃 􁘅 􁘇  􁘉 􁘋 􁘍     􀟦 􀟧
"                     
" 􂠹  􂠷    􁘂 􁘄 􁘆  􁘈 􁘊 􁘌     􀠉 􀠊
"
" 􀰗  􀐗  􁐄
" 􀐓  􀐑  􀐔  􀐒    􀎮 􀎰 􀎱 􀎯  􀽴􀽵
" 􀺉  􀺇  􀺊  􀺈  
" 􀯮  􀯭  􀯯  􁸼   􂁟 􁺟 􁺠 􀩢􀫴􀮋􀮞􀮟􀮌􁓓􀓗􀩷 􀇷􀇵 
" 
" 􀟲  􀫸 􀆿  􀩲 􀐕 􀐖    􀐷 􀐸 􂮨 
"
" 􀏭 􀏯 􂂼  􀲳 􀢱  􀡜   
" 􀏮 􀏰 􂂽  􀲴 􀢲  􀡝
"           
"           􁕜􀼏􀹲􁕍􁕝􀼐􀹳􀺿
"
" 􀧸 􀧹 􀩄 􀩅 􀩆 􀩇 􀞾 􀞿  􀟗  􀇸􀇹 􀙢􀙣 􀬎􀬏
"                                                       
" 􀝜 􀍷 􀕩 􀕪 􀕫 􀢊 􁅃 􀓞 􀧒 􂞶  􂞷  􀧙 􀜞 􀫲 􀣽 
" 􀾘 􀕴 􀕵 􀧺 􀧻    􁊓 􀓔 􀧑 􀴥 􀭉 
"
" 􀀀 􀻃  􁹯  􁹮  􁹰  􁹭    􁹢   
" 􀀁 􀻄  􀪗 􀀃 􀪖 􀀂   􁹪
"
" 􀋂 􀋃 􀋄 􀋇 􀋈    􀋃􀋃􀋃􀋄􀋂  􀥭 􀥮 􀤚 􀤛
"
" 􀂒 􀣦  􀪛 􀚔 􀪚 􀚓  􀏠 􀕰 􀕮 􀕲 􀡗

"                                   
" 􀛤 􀚕 􀚖 􁀸 􁀹 􀛣    􀾙 􁀰 􁕣 􀇿􀇾  􀥰 􀥱  
" 􀟉 􁀃 􁀄 􁀅 􁀆 􀟈 􀾗 􁕤 􁕥         􀋀 􀋁
"
"
" 􀟊 􀟋 􁀇 􁀈 􁀼 􁀽
" 
" 􀝝 􀝞 􁀉 􁀊 􁀾 􁀿
"
" 􀶺 􀶻 􁀋 􁀌 􁀺 􁀻
"
" 􀟆 􀟇 􀇺 􀇻 􀇼 􀇽
"
"
" 􀂓 􀣧  􁒠 􁒣 􁒡 􁒢  􀘜 􀕱 􀕯 􀕳 􀡘 
"                                   
"             􀋲 􀋱 􀢽 􀣩 􀋴 􀋳 􀑬
" 􁙠 􀷾 􁙕 􀭞 􀋲 􀋱 􀢽 􀣩 􀋴 􀋳 􀋵 􀋶 􀵬 􁖭 􀲱 􀲲
"                                                       
" 􀝿 􀞀 􁖖 􀋷 􀋸 􀋹 􀋺 􀋻 􀋼 􀋽 􀋾 􁘿 􁙀 􀋿
" 
" 􀌀 􀌁 􀌂 􀌃 􀌄 􀌅 􁉀 􁉁 􂬁  􀧎 􀵫 􀌇 􀜓 􀋺
" 
" 􀅫 􀅓 􀅔 􀅕 􀅖 􀨡 􀅏 􀵷 􀵿 􀅐 􀅒 􀅑 􀓢 􀓡
"
" 􀥊  􂐦   􀅯  􀅰  􂐭     􀎗 􀎘 􀎙  􀍱 􀍲 􀜍 􀜎
"
" 􀊫 􀬸 􀒒 􀒓 􀊬 􀊭 􂈂  􀊮 􀥩 􀭥 􁇥 􁈟
"
"                                 
" 􀙚  􀸏 􀡅 􁇵 􀅮   􀆄 􀆅 􀸓 􀆃                         
"                                          
" 􀫕 􀤏 􀙊 􀍠 􀍡 􀠩 􀟂 􀟀 􀉈  􀍳 􀍴    
" 􀫖 􀤐 􀙋       􀠪 􀟃             
"                                              
" 􀍺􁎴􀪐 􀍻􁎵􀪑  􀎐  􀣶􀣷   􀰬 􂀙   􀐩 􂇏  􀐪 􀐫 􀐬    
"
"          􀏛 􀏚     􂆅  􁚬  􀬸 􀅶 􀩳 􀹆
"    􀏗 􀏡 􀱥 􀱤 􀏝
"    􀏗 􂬏  􂬗  􂧮  􂧯  􀤳 􂬑  􂧭  􂧰  􀚅
" 􀏃 􀣤 􀿯 􀤷 􀤶 􀿰 􁎽 􀧈 􀧊 􀧌 􀇴
"    􀏑 􀾮 􀤵 􀤴 􀾯    􀾊       
" 􀢈       􀥟 􀥞    􀥝 􀏟    􀏣 􀏥 􀏢    
" 􀢉    􀴊 􀨩 􀨱 􀨨       􀓛 􀛦 􂫑  􀇶
"       􀭳 􀭴 􀭶 􀭵 
"       􁼁  􁼅  􁼉  􁻽  􂂟  􂂣  􂬜  􀢿 􀠹 􁁀
" 􀠳 􀠴 􀑧 􀑨 􀭱 􀭲 􀫹􁽾 􁽺 􀫺 􀫻 􁽼 􁽸 􀫼 
" 
" 􀏧 􀥀 􀏩 􀾬 􀢳 􂠗  􀏫 􀑯 􀣵   􀣂  
" 􀏨 􀤿 􀏪    􀢴    􀏬 􀑰 􂣳                               
" 􀶣             􂠘  

" 􀎠 􀎢 􀎤 􀟕 􂅦   􀙇 􀙈 􀙥 􀖀 􁅒 
" 􀎡 􀎣 􀎥 􀟖 􂅧 
" 
" 􀑂 􀘞 􀜟 􀑃 􀙫 􁆬 􁅥  􀭭 􀭮 􁑡
"
" 􁙪 􁙫 􀥁 􁅊 􀏞 􀣾 􀣿 􀦍 􀣰 􀤀 􀤁 􁽸 􁽺 􁽼􁽾 􁂷 􁂸 􀏇 􀏉 􀏍 􀏋 


"
" View Menu:
"
" aunmenu View
" an icon=text.badge.checkmark:hierarchical 120.200.100 View.Chars <Nop>
exec 'an' SfIcon('􀆅') '120.200.200' 'View.Chars.Default' '<Cmd>CharsDefault<CR>'
exec 'an' SfIcon() '120.200.230' 'View.Chars.None' '<Cmd>CharsNone<CR>'
exec 'an' SfIcon() '120.200.250' 'View.Chars.Minimal' '<Cmd>CharsMinimal<CR>'
exec 'an' SfIcon() '120.200.260' 'View.Chars.Diagnostic' '<Cmd>CharsDiagnostic<CR>'

an 120.300 View.-sep1-		<Nop>
an icon=pin 120.330 View.Marks	<Cmd>marks<CR>

" Visual Outline:
an 120.400 View.-sep2-		<Nop>
exec 'an' SfIcon() '120.400.200' 'View.􀓔\ \ Visual.Show\ Outline'
      \ '<Cmd>Toggle g:mayhem_show_visual_outline<CR>'

an 120.600 View.-sep3-		<Nop>
exec 'an' SfIcon('􀵫') '120.600.200' 'View.􀆪\ \ Unicode.Whitespace\ Hints'
      \ '<Cmd>UnicodeWhitespaceHints<CR>'
exec 'an' SfIcon('􀋡') '120.600.300' 'View.􀆪\ \ Unicode.Tag\ Hints'
      \ '<Cmd>UnicodeTagHints<CR>'
exec 'an' SfIcon('􀅑') '120.600.400' 'View.􀆪\ \ Unicode.Variation\ Selector\ Hints'
      \ '<Cmd>VariationSelectorHints<CR>'

"! Debug / WinSize:
exec 'an' SfIcon('􀆄') '120.300.150' 'View.􂟦\ \ Debug.WinSize'
      \ '<Cmd>Toggle g:mayhem_sl_show_winsize<CR>'
exec 'aunmenu' 'View.􂟦\ \ Debug.WinSize'
exec 'an' SfIcon('􀆅') '120.300.150' 'View.􂟦\ \ Debug.WinSize'
      \ '<Cmd>Toggle g:mayhem_sl_show_winsize<CR>'
exec 'aunmenu' 'View.􂟦\ \ Debug.WinSize'
exec 'an' SfIcon() '120.300.150' 'View.􂟦\ \ Debug.WinSize'
      \ '<Cmd>Toggle g:mayhem_sl_show_winsize<CR>'


"
" File Menu:
"
an 10.404 &File.Diff\ With\ Saved<Tab>§df	<Cmd>DiffWithSaved<CR>

"
" Edit Menu:
"
noremenu  20.402 &Edit.&ReSelect\ Paste<Tab>gp	gp
noremenu  20.403 &Edit.&ReSelect\ Visual<Tab>gv	gv

"
" HIG Cmd And Option Movement Mappings:
" This replaces the section in $VIMRUNTIME/gvimrc, which
" is disabled via this flag in ./vimrc
"   let macvim_hig_shift_movement = 1
"
if has("gui_macvim")
  "
  " ▌️⌘️ 􁾱  ▐️ ️Move to the ends of things

  " ▌️􀆔 􁾲  ▐️────▷ Jump to top of PUM
  noremap <D-Up> <C-Home>
  " ▌️􀆔 􁾲  ▐️────▷ Jump to top of PUM
  inoremap <expr> <D-Up>     pumvisible() ? "\<PageUp>\<C-p>\<C-n>"   : "\<C-Home>"

  "􀆔􁾵 
  noremap   <D-Right>  <End>
  noremap!  <D-Right>  <End>
" Accept selection + exit PUM
  inoremap <expr> <D-Right>  pumvisible() ? "\<PageUp>\<C-p>\<C-n>"   : "\<C-Home>"

  noremap   <D-Down>   <C-End>
  inoremap  <D-Down>   <C-End>
  " ▌️􀆔 􁾳  ▐️ Jump to end of PUM
  inoremap <expr> <D-Down>   pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-End>"

  noremap   <D-Left>   <Home>
  noremap!  <D-Left>   <Home>
  " ▌️􀆔 􁾴  ▐️ Cancel out of PUM
  inoremap <expr> <D-Left>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>"   : "\<C-Home>"

  " ▌️􀆔 􀆛 ▐️ ️
  inoremap  <D-BS> <C-u>

  "
  " ▌️􀆕 􁾱  ▐️ Move (around) things in steps

  " ▌️􀆕 􁾱  ▐️ Move in steps
  " noremap <M-Up> {
  inoremap <M-Up> <C-o>{

  noremap  <M-Right> <C-Right>
  noremap! <M-Right> <C-Right>

  " noremap <M-Down> }
  inoremap <M-Down> <C-o>}

  noremap  <M-Left> <C-Left>
  noremap! <M-Left> <C-Left>

  inoremap <M-BS> <C-w>

" ▌️􀆕 􁾲  ▐️────▷ Jump up a page in PUM listing
  inoremap <expr> <M-Up> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-o>{"
" ▌️􀆕 􁾵  ▐️────▷ Select part of path in PUM + prompt for next part
  inoremap <expr> <M-Right> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-Home>"
" ▌️􀆕 􁾳  ▐️────▷ Jump down a page in PUM listing
  inoremap <expr> <M-Down> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<C-End>"
" ▌️􀆕 􁾴  ▐️────▷ Jump up a level in path, and reselect
  inoremap <expr> <M-Left> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<C-o>}"
endif

" ^X  open
" ^P  prev (preview inline)
" ^N  next (preview inline)
" ^Y  accept
" ^E  cancel



" if has("gui_macvim")
  " Shift + special movement key (<S-Left>, etc.) and mouse starts insert mode
  " set selectmode=mouse,key
  " set keymodel=startsel,stopsel

  " nn   <S-D-Left>     <S-Home>
  " vn   <S-D-Left>     <S-Home>
  " ino  <S-D-Left>     <S-Home>
  " nn   <S-M-Left>     <S-C-Left>
  " vn   <S-M-Left>     <S-C-Left>
  " ino  <S-M-Left>     <S-C-Left>

  " nn   <S-D-Right>    <S-End>
  " vn   <S-D-Right>    <S-End>
  " ino  <S-D-Right>    <S-End>
  " nn   <S-M-Right>    <S-C-Right>
  " vn   <S-M-Right>    <S-C-Right>
  " ino  <S-M-Right>    <S-C-Right>

  " nn   <S-D-Up>       <S-C-Home>
  " vn   <S-D-Up>       <S-C-Home>
  " ino  <S-D-Up>       <S-C-Home>

  " nn   <S-D-Down>     <S-C-End>
  " vn   <S-D-Down>     <S-C-End>
  " ino  <S-D-Down>     <S-C-End>
" endif

