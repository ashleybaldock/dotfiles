

" function! s:MenuBuild()
"   call popup_notification("      üôà üôâ üôä", #{ line: 2, col: 10, highlight: 'ToolbarLine', time: 2000} )
" endfunc

" function! s:TestMenu()
"   nunmenu WinBar
"   nnoremenu 1.10 WinBar.‚ÄºÔ∏è\     :
"   nnoremenu 1.20 WinBar.üî∂     :
"   nnoremenu 1.30 WinBar.üåà     :
"   nnoremenu 1.40 WinBar.üêµ     :call s:MenuBuild()
"   nnoremenu 1.50 WinBar.üçÜ     :
" endfunc

" command! TestMenu :call <SID>TestMenu()

if empty(&guitablabel)
  set guitablabel=%M%t
endif

" Send print jobs to Preview.app.  The user can then print from it.
set printexpr=macvim#PreviewConvertPostScript()

" askpass
let $SSH_ASKPASS = simplify($VIM . '/../../Resources') . '/macvim-askpass'
let $SUDO_ASKPASS = $SSH_ASKPASS



let g:mayhem_toolbarToggles = {
      \ 'virtualedit': {
        \ 'priority': 100,
        \ 'states': {
          \ 'block': {
            \ 'next': 'insert',
            \ 'ttip': 'Virtualedit:  Off [Block]‚ñπInsert ',
            \ 'icon': 'cursorarrow.and.square.on.square.dashed'
          \ },
          \ 'insert': {
            \ 'next': 'none',
            \ 'ttip': 'Virtualedit: ‚ñπOff  Block [Insert]',
            \ 'icon': 'filemenu.and.cursorarrow'
          \ },
          \ 'none': {
            \ 'next': 'block',
            \ 'ttip': 'Virtualedit: [Off]‚ñπBlock  Insert',
            \ 'icon': 'dots.and.line.vertical.and.cursorarrow.rectangle'
          \ },
          \ '*': {
            \ 'next': 'block',
            \ 'ttip': 'Virtualedit:  Off ‚ñπBlock  Insert [???]',
            \ 'icon': 'dots.and.line.vertical.and.cursorarrow.rectangle'
          \ },
        \ }
      \},
      \ 'delcombine': {
        \ 'priority': 120,
        \ 'states': {
          \ 0: {
            \ 'next': 1,
            \ 'ttip': 'Turn delcombine on',
            \ 'icon': 'delete.left'
          \ },
          \ 1: {
            \ 'next': 0,
            \ 'ttip': 'Turn delcombine off',
            \ 'icon': 'delete.left.fill'
          \ },
          \ '*': {
            \ 'next': 1,
            \ 'ttip': 'Turn delcombine off',
            \ 'icon': 'delete.left.fill'
          \ },
        \ },
      \ },
    \ }


function! s:UpdateDynamicToolBarToggle(name)
  exec 'aunmenu <silent> ToolBar.Toggle\ '..a:name

  exec 'let value = &g:'..a:name
  let toggles = get(g:, 'mayhem_toolbarToggles', {})
  let toggle = get(toggles, a:name, {})
  let priority = get(toggles, 'priority', 500)
  let states = get(toggle, 'states', {})
  let state = get(states, value, get(states, '*', {}))
  let nextvalue = get(state, 'next', v:null)
  let tooltip = get(state, 'ttip', '')
  let icon = get(state, 'icon', 'puzzlepiece.extension')

  if nextvalue isnot v:null
    exec 'an icon='..icon..' '..priority..' ToolBar.Toggle\ '..a:name..' :let &g:'..a:name..'='..nextvalue..'<CR>'
    exec 'tmenu ToolBar.Toggle\ '..a:name..' '..tooltip
  else
    exec 'an icon=exclamationmark.square '..priority..' ToolBar.Toggle\ '..a:name..' <Nop>'
    exec 'tmenu ToolBar.Toggle\ '..a:name..' UpdateDynamicToolBarToggle:Err: No matching state and fallback missing'
  endif
endfunc

function! s:AddDynamicToolBarToggle(name)

  if exists('+'..a:name)
    augroup DynamicToolBar
      exec 'autocmd OptionSet '..a:name..' exec s:UpdateDynamicToolBarToggle(expand(''<amatch>''))'
    augroup END

    call s:UpdateDynamicToolBarToggle(a:name)
  else
    exec 'an icon=questionmark.square.dashed '..priority..' ToolBar.Toggle\ '..a:name..' <Nop>'
    echom 'ToolBarToggle:Err: Setting "'..a:name..'" does not exist'
  endif
endfunc

" SF icons can be suffixed with:
" :monochrome
" :hierarchical
" :palette
" :multicolor
" :variable-[0..1]
function! s:ObsessionTBStatus()
  silent! nunmenu ToolBar.ObsessionStatus

  if exists("g:loaded_obsession")
    let obstatus = ObsessionStatus('active','paused')

    if obstatus == 'active'
      an icon=gear.badge.checkmark 110 ToolBar.ObsessionStatus :Obsession<CR>
      tmenu ToolBar.ObsessionStatus Obsessing, click to pause
    elseif obstatus == 'paused'
      an icon=gear.badge.xmark:hierarchical 110 ToolBar.ObsessionStatus :Obsession<CR>
      tmenu ToolBar.ObsessionStatus Obsession paused, click to resume
    else
      an icon=gear.badge.questionmark:hierarchical 110 ToolBar.ObsessionStatus :NewObsession<space>
      tmenu ToolBar.ObsessionStatus No Session, click to create one
    endif
  else
    an icon=gear 110 ToolBar.ObsessionStatus <Nop>
    amenu disable ToolBar.ObsessionStatus
    tmenu ToolBar.ObsessionStatus Obsession not loaded.
  endif
endfunc

function! s:RemoveDefaultToolBar()
  aunmenu ToolBar.-sep1-
  aunmenu ToolBar.-sep2-
  aunmenu ToolBar.-sep7-
  aunmenu ToolBar.Open
  aunmenu ToolBar.Save
  aunmenu ToolBar.SaveAll
  aunmenu ToolBar.Print
  aunmenu ToolBar.Undo
  aunmenu ToolBar.Redo
  aunmenu ToolBar.Cut
  aunmenu ToolBar.Copy
  aunmenu ToolBar.Paste
  aunmenu ToolBar.RunScript
  aunmenu ToolBar.Make
  aunmenu ToolBar.Help
  aunmenu ToolBar.SaveSesn
  aunmenu ToolBar.LoadSesn

  " an ToolBar.WinClose <Nop>
  " an ToolBar.WinMax <Nop>
  " an ToolBar.WinMin <Nop>
  " an ToolBar.WinSplit <Nop>
  " an ToolBar.WinVSplit <Nop>
  " an ToolBar.WinMaxWidth <Nop>
  " an ToolBar.WinMinWidth <Nop>
endfunc

function! s:AddDynamicToolBar()
  " ---- Status Indicators ------ 100
  call s:ObsessionTBStatus()

  " ------------Sep-------------- 200
  an 200 ToolBar.-flexspace1a-       <Nop>
  an icon=poweron 210 ToolBar.Sep1   <Nop>
  amenu disable ToolBar.Sep1
  an 220 ToolBar.-flexspace1b-       <Nop>
  " --------- Actions ----------- 300

  an <silent> icon=arrow.rectanglepath 310
        \ ToolBar.Reload\ Pane
        \ <Nop>
  tmenu ToolBar.Reload\ Pane Reload current pane

  an <silent> icon=gearshape.arrow.triangle.2.circlepath 320
        \ ToolBar.Reload\ Config
        \ <Nop>
  tmenu ToolBar.Reload\ Config Reload config

  an <silent> icon=paintpalette 330
        \ ToolBar.Reload\ Colorscheme
        \ :colorscheme vividmayhem
  tmenu ToolBar.Reload\ Colorscheme Reload Colourscheme

  an <silent> icon=terminal 340
        \ ToolBar.Terminal
        \ :terminal
  tmenu ToolBar.Terminal Open Terminal window in split

  nnoremenu icon=folder 350
        \ ToolBar.Show\ In\ Finder
        \ <Nop>
  tmenu ToolBar.Show\ In\ Finder Show current file in Finder
  inoremenu icon=questionmark.folder
        \ ToolBar.Show\ In\ Finder
        \ <Nop>

  " ------------Sep-------------- 400
  an 400 ToolBar.-flexspace2a-       <Nop>
  an icon=poweron 410 ToolBar.Sep2   <Nop>
  amenu disable ToolBar.Sep2
  an 420 ToolBar.-flexspace2b-       <Nop>
  " --------- Toggles ----------- 500

  call s:AddDynamicToolBarToggle('virtualedit')
  call s:AddDynamicToolBarToggle('delcombine')

  " ------------Sep-------------- 600
  an 600 ToolBar.-flexspace5-        <Nop>

endfunc

augroup DynamicToolBar
  autocmd User Obsession call s:ObsessionTBStatus() | redraw!
  autocmd SessionLoadPost * call s:ObsessionTBStatus() | redraw!
augroup END

if !exists("g:mayhem_did_toolbar_init")
  let g:mayhem_did_toolbar_init = 1

  call s:RemoveDefaultToolBar()

  call s:AddDynamicToolBar()

  " call UpdateDynamicToolBar(0)
endif

