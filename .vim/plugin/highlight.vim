if exists("g:mayhem_loaded_highlight")
  finish
endif
let g:mayhem_loaded_highlight = 1


" TODO - add to symbols repository when implemented
let s:symbol_linksto = get(g:, 'mayhem_symbol_hihi_linksto', '‚´ò‚Éó ')


"
" Has two implementations, this one uses `syn match`
"
function! s:AddSynMatch(name) abort
  exec 'syn match ' .. a:name .. ' /\<' .. a:name .. '\>/'
    \ .. ' contained contains=NONE containedin=VimHiGroup'
  return a:name
endfunc

function! s:HighlightHighlight() abort
  augroup HiHi
    autocmd!
    autocmd ColorScheme vividmayhem call s:HighlightHighlight()
  augroup END

  " e.g.:
  " syn match HlMkDnCdDelim /\<HlMkDnCdDelim\>/ contained contains=NONE containedin=VimHiGroup
  "
  let w:synmatches = []
  %s/^:\?hi\w*\s\+\(clear\)\@!\(def\w*\s*\)\?\(link\s*\)\?\<\zs\(\w\+\)\ze\>/\=w:synmatches->add(submatch(0))/ne
  %s/^:\?syn\w*\s\+\(match\|region\|keyword\)\s\+\<\zs\(\w\+\)\ze\>/\=w:synmatches->add(submatch(0))/ne
  for synmatch in w:synmatches
    exec 'syn match ' .. synmatch .. ' /\<' .. synmatch .. '\>/'
      \ .. ' contained contains=NONE containedin=VimGroupName,VimHiGroup'
  endfor
endfunc

command! HiHi call <SID>HighlightHighlight()


"
" See: ./sfsymbols.vim
"
function! s:GetCharacterInfo()
  let char = char2nr(getline('.')[col('.')-1:-1])->nr2char()
  let output = 'No Char Info'

  if IsSfSymbol(char)
    let info = GetSfSymbolInfo(char)
    let output = ''..info['symbol']..
          \ ' '..info['code']..
          \ ' '..info['name']..' (SFSymbol)'
  else
    " TODO implement similar in ./unicode.vim and remove dep.
    if !exists('g:autoloaded_characterize')
      " Characterize's autoload uses redir, which can't be nested
      silent exec 'Characterize'
    endif
    let v:errmsg = ''
    redir => output
      silent exec 'Characterize '..char
    redir END
    if v:errmsg != ''
      echom 'Error running Characterize: '..v:errmsg
      let output = 'Char Info Err'
    else
      let output = trim(output)->split(', ')[1]
    endif
  endif
  return [output]
endfunc


" Follow links to the end (or until detecting a loop)
function s:GetLinkChain(name)
  let chain = []
  let lastName = a:name
  while lastName != ''
    " if name seen already, must be in a loop
    " this isn't a very efficient lookup
    " but highlighting chains are very short
    if (len(hlget(lastName)) > 0)
      call add(chain, lastName)
      let hl = hlget(lastName)[0]
      let lastName = get(hl, 'linksto', '')
    else
      let lastName = ''
    endif
  endwhile
  return chain
endfunc

"‚ÇÅÔ∏è‚ÇÇÔ∏è‚ÇÉÔ∏è
"‚ÇÅ‚Éû ‚ÇÇ‚Éû ‚ÇÉ‚Éû  ¬π‚Éû ¬≤‚Éû ¬≥‚Éû ‚Å¥‚Éû    ¬πÔ∏è¬≤Ô∏è¬≥Ô∏è‚Å¥Ô∏è‚ÅµÔ∏è‚Å∂Ô∏è‚Å∑Ô∏è‚Å∏Ô∏è‚ÅπÔ∏è‚ÇÅÔ∏è‚ÇÇÔ∏è‚ÇÉÔ∏è‚ÇÑÔ∏è‚ÇÖÔ∏è‚ÇÜÔ∏è‚ÇáÔ∏è‚ÇàÔ∏è‚ÇâÔ∏è¬πÃ≤‚ñ∫Ô∏è¬≤Ã≤Ô∏è¬≥Ã≤Ô∏è‚Å¥Ã≤Ô∏è‚ÅµÃ≤Ô∏è‚Å∂Ã≤Ô∏è‚Å∑Ã≤Ô∏è‚Å∏Ã≤Ô∏è‚ÅπÃ≤Ô∏è‚ñ∫Ô∏è‚ÇÅÔ∏è‚ÇÇÔ∏è‚ÇÉÔ∏è‚ÇÑÔ∏è‚ÇÖÔ∏è‚ÇÜÔ∏è‚ÇáÔ∏è‚ñ∫Ô∏è‚ÇàÔ∏è‚ÇâÔ∏è¬≤¬≥‚Å¥‚ñ∫Ô∏è‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ‚ÇÅÍõ±‚ÇÇÍõ±‚ÇÉÍõ±‚ÇÑÍõ±‚ÇÖÍõ±‚ÇÜÍõ±‚ÇáÍõ±‚ÇàÍõ±‚ÇâÍõ±
"‚ÇÅ‚ÉûÔ∏è ‚ÇÇ‚ÉûÔ∏è ‚ÇÉ‚ÉûÔ∏è  ¬π‚Éû ¬≤‚Éû ¬≥‚Éû ‚Å¥‚Éû ‚Åµ‚Éû ‚Å∂‚Éû ‚Å∑‚Éû ‚Å∏‚Éû ‚Åπ‚Éû  0Ô∏é‚É£ 1Ô∏é‚É£ 2Ô∏é‚É£ 3Ô∏é‚É£ 4Ô∏é‚É£ 5Ô∏é‚É£ 6Ô∏é‚É£ 7Ô∏é‚É£ 8Ô∏é‚É£ 9Ô∏é‚É£  
"
" ‚éõ             ·êÖ·ê≥         ‚óÅÔ∏è[ ‚ÇÅÔ∏è1Ô∏é‚É£ ‚Æï  ‚óÅÔ∏è]  ·êÖ·ê≥  ‚ñ∑Ô∏è·ê≥  ‚ñ∑Ô∏è·ê≥‚Æï·ê≥               ‚éû
"
"
" join(chain, '‚ñ∂Ô∏é‚ñ¨·∑û‚ñ¨Õ•‚ñ¨·∑†‚ñ¨·∑ú‚ñ∂Ô∏é') join(chain, ' ‚ñ¨‚ñ∂Ô∏é ') join(chain, ' -> ') join(chain, '  ü…™…¥Õ¢·¥ã ')
"
"  ÙÄØ≠ ÙÄØÆ ÙÄØØ ÙÅâΩ ÙÅãº ÙÅâº ÙÅãΩ ÙÅãõ ÙÅãú ÙÄØ∞ ÙÅåÖ ÙÄØ± ÙÄØ≤ ÙÄØ≥ ÙÅäï
"ÙÄÖìÙÄÖî
"
"ÙÄÖï
"ÙÄÖñ
"ÙÄ®°
"ÙÄÖó
"ÙÄÖòÙÄÖî
"
"
"
" ‚éõ                                       ‚éû
" ‚é¢ ·¥Ö  1234: cssUrlFunction  SÔ∏ètatement  ‚é•
" ‚é¢  ·¥Ñ  567: cssAttrRegion                           ‚é•
" ‚é¢  ·¥Ñ   89: cssDefinition                           ‚é•
" ‚éù                        Synstack @ Row 62 Col 39  ‚é†
"
" ‚éõ Synstack   fg:#aabbcc bg:#227788 sp: #445566           ‚éû
" ‚é¢    1234: cssUrlFunction ‚îÄ‚îÄ‚îÄ‚ñ∫Ô∏è Statement #aabbcc #227788 ‚é•
" ‚é¢ ·¥Ö  1234: cssUrlFunction ‚îÄ2Ô∏é‚É£‚ï∂‚ñ∫Ô∏è Statement                 ‚é•
" ‚é¢  ·¥Ñ  567: cssAttrRegion                  ‚é•
" ‚é¢  ·¥Ñ   89: cssDefinition 
"
" ‚é¢      RÃ≤ÃÖ9Ô∏è5Ô∏è CÃ©Ãç·µíÃçÃ©5Ô∏è6Ô∏è V·∂ú5Ô∏è6Ô∏è  ·µá ∏·µó·µâ9Ô∏è2Ô∏è
"
" ‚é¢       Ä·êß9Ô∏è5Ô∏è ‚éüC‚éú5Ô∏è6Ô∏è ·µõ·∂ú·µíÀ°5Ô∏è6Ô∏è  ·µá ∏·µó·µâ‚é°‚éü9Ô∏è2Ô∏è‚éü
" ‚é¢     
"       
"        ‚éµ 
"      ·¥ø‚ÉûÔ∏é]          ÃÖÃ≤3Ã≤ÃÖ3Ã≤ÃÖ2Ã≤ÃÖ     ùü∏Ã≤ÃÖùü∫Ã≤ÃÖùüπÃ≤ÃÖ  ùüÆÃ≤ÃÖùü∞Ã≤ÃÖùüØÃ≤ÃÖ ùü£Ã≤ÃÖùü•Ã≤ÃÖùüßÃ≤ÃÖ ùüëÃ≤ÃÖùüîÃ≤ÃÖùüéÃ≤ÃÖ
"
          "\ ' SynStack @Ô∏è  ÄÃ≤ÃÖ%s |·¥Ñ|%s  ôùóí%s',
"        ùò§ùò∞ùò≠ ùò≥ùò∞ùò∏   
"
" ‚ï∑   ‚ï∑   ‚ï∑ 80‚ï∑
" ‚éù            Synstack @   R ∑Ã≤ 62 CÀ° 39  ‚é†      ‚ïµVr‚ï¥‚ïµCh‚ï¥‚ïµCol‚ïµ
"
" ‚éù       Synstack @ row _6Ã≤2Ã≤_ ‚îÇ Õ¶Õ®ÕÆÕÆ Õ¶Ô∏é Õ¶Õ® ∞ ∞Ô∏è ∞Ô∏éÀ°39‚îÇ·µõ·µõÔ∏è·µõÔ∏é Õ®ÕÆ35‚îÇ Õ™Õ®29‚îÇÔ∏è 39 [v 35|c 35]   ‚é†
"     3Ã≤ÃÖ9Ã≤ÃÖ   ‚èê62‚èê
" 
" ·¥ø·¥º·µÇ·¥øÔ∏è·¥ºÔ∏è·µÇÔ∏è·¥ø‚ÉûÔ∏é ·¥º‚ÉûÔ∏é ·µÇ‚ÉûÔ∏é  ≥·µí ∑ ≥Ô∏è·µíÔ∏è ∑Ô∏è ≥‚ÉûÔ∏é ·µí‚ÉûÔ∏é  ∑‚ÉûÔ∏é   ‚Åø‚Åø‚Åø ≤ ≤ ≤ ∞ ∞ ∞À°À°À° ∑ ∑ ∑
" ·¥∏·¥º·¥¨·¥∞·¥∏Ô∏è·¥ºÔ∏è·¥¨Ô∏è·¥∞Ô∏è·¥∏Ô∏é·¥ºÔ∏é·¥¨Ô∏é·¥∞Ô∏é  ·¥è   
"    ≥·µí ∑ ·∂ú·µíÀ° ·µõ·êß·∂ú·µíÀ° ·∂ú ∞·êß·∂ú·µíÀ° ·µá ∏·µó·µâ·êß
"   ·¥ø·µí ∑ ·∂ú·µíÀ° ·µõÍúû ≥·µó·êß·∂ú·µíÀ° ·∂ú ∞·êß·∂ú·µíÀ°          V
"   R·µí ∑ ·¥Ñ·µíÀ° v·∂ú·µíÀ° ch·∂ú·µíÀ°  R C V H ·¥† VÀ°Õ¶Õ® ·∂ú·µíÀ°C·¥è ü |Ô∏è·¥Ñ|Ô∏è  ú·∂ú·µíÀ°C·¥è üÕ¶  ·¥†…™·¥õC·¥è ü  ú·¥ÄC·¥è   ‚ñïÔ∏è   ÄÃ≤ÃÖ
"
" ·µõ·µ•·µõÔ∏è·µ•Ô∏è·µõÔ∏é·µ•Ô∏é ÀØÀ∞À±ÕîÀ≤Õï À±ÕïÀ≤Õî À±ÕêÀ≤Õê ÀñÃùÀñÀñÔ∏èÃùÀóÀóÔ∏è À≥Ã£À≥Ã£Ô∏è.Ã£.Ã£Ô∏è ÀåÃ©ÀØÃ© ::Ô∏èÀ∏À∏ ·µ£·µ£Ô∏è·µ£Ô∏é ·∂ú·µí·∂´À£ ºÃä·∂úÔ∏è·µíÔ∏è·∂´Ô∏èÀ£Ô∏è ºÃäÔ∏è·∂úÔ∏é·µíÔ∏é·∂´Ô∏éÀ£Ô∏é ºÃäÔ∏é À§ ï ñ î ‚é•  Õñ À™À´ . |Ã∞Ã¥ ‚ÄñÃª‚∏ã‚∏ãÔ∏è‚∏ãÔ∏é‚∏ãÃªÔ∏é‚ÄñÃ™ ‚ÄñÃù
"
"   ÀπÀ∫ÀªÀºÀΩÀæÍúöÀø Ãö  À∫Õê ‚ÄøÀå  À≤ÕêÕï À±Õî 
          
"                                           
function! s:UpdateSynStackBuffer(winid)     
  let bufnr = winbufnr(a:winid)
  let default1 = 'No Highlighting Here'
  let default2 = ''
  let alt1 = 'Synstack Unavailable'
  let i = 1
  " Be better to make an array and then write               TODO
  " the buffer all at once (and handle justifying text)
  " Would also permit breaking this long function up into bits
  let longest = max([strwidth(default1), strwidth(default2)])
                                            
  call setbufline(bufnr, 1, default1)
  call setbufline(bufnr, 2, default2)

  if !exists("*synstack")
    call setbufline(bufnr, 1, alt1)
  else
    let stack = map(synstack(line('.'), col('.')),
          \ 'hlget(synIDattr(v:val, "name"))[0]')

    for val in reverse(stack)
      let res = ""
      if (get(val, 'cleared'))
        let res = '·¥Ñ' .. res
      else
        let res = ' ' .. res
      endif
      if (get(val, 'default'))
        let res = '·¥Ö' .. res
      else
        let res = ' ' .. res
      endif
      let res = res .. printf('%5S: ', val.id)
    " Hide intermediate links in chain to save space?       TODO
      if (get(val, 'linksto', "") != "")
        let chain = s:GetLinkChain(val.name)
        let matchids = mapnew(chain,
              \ {i, link -> 
              \  win_execute(a:winid,
              \   'call matchadd('''..link..''', ''\<'..link..'\>'')'  )})
        let res = res .. join(chain, ' '..s:symbol_linksto..' ')
      else
        let res = res .. val.name
      endif
      let res = res .. ''
      call setbufline(bufnr, i, res)
      let longest = max([longest, strwidth(res)])
      let i = i + 1
    endfor
  endif
  "
  " Get info about character under cursor
  " let charinfo = printf('%'..longest..'S', ExecAndReturn('Characterize'))
  let [charinfo] = s:GetCharacterInfo()
  let longest = max([longest, strwidth(charinfo)])
  call setbufline(bufnr, max([3, i]), l:charinfo)
  "
  let cc = charcol('.')
  let vc = virtcol('.')
  let bc = col('.')
  let col = printf('ùñ¢ùóàùóÖ%s', cc)
  let vcol = printf('ùñµ%s', vc)
  let byte = printf('ùñ°%s', bc)
  let numbers = printf('ùñ±ùóàùóê %s %s%s%s',
        \ line('.'),
        \ col,
        \ cc == vc ? '' : printf('(%s)', vcol),
        \ cc == bc ? '' : printf('(%s)', byte))
  let title = printf('%'..longest..'S', numbers)
  " let title = printf('%'..longest..'S', printf(' SynStack @ Row %s Col %s (V %s H %s)', line('.'), col('.'), virtcol('.'), charcol('.')))
  call setbufline(bufnr, max([4, i + 1]), title)
endfunc

function s:SynStackPopupFilter(winid, key)
  " if a:key == '<LeftMouse>'
  "   let contents = getbufline(winbufnr(a:winid), 1, '$')
  "   echom contents
  "   :vsp|enew|call map(contents, {_, val -> appendbufline(bufnr(), 1, val) })|setlocal nomodified nomodifiable
  "   return 0
  " endif
  if a:key == 'x'
    call s:SynStackDisable()
    call s:SynstackSetup()
    return 1
  endif
  return 0
endfunc

function s:SynStack()
  if empty(popup_getpos(get(w:, 'mayhem_synstack_popid', 0)))
    let w:mayhem_synstack_popid = popup_create('', #{
          \ pos: 'topleft',
          \ line: 'cursor+2',
          \ col: 'cursor',
          \ minwidth: 30,
          \ maxwidth: 80,
          \ minheight: 3,
          \ padding: [0,1,0,1],
          \ border: [1,1,1,1],
          \ highlight: 'HlPop01Bg',
          \ borderhighlight: ['HlPop01T','HlPop01R','HlPop01B','HlPop01L'],
          \ borderchars: [' ','‚é•',' ','‚é¢', '‚éõ','‚éû','‚é†','‚éù'],
          \ moved: 'any',
          \ filter: 's:SynStackPopupFilter',
          \ filtermode: 'n',
          \ title: ' ‚òÖ '
          \ })
  else
    call popup_move(w:mayhem_synstack_popid, #{
          \ pos: 'topleft',
          \ line: 'cursor+2',
          \ col: 'cursor',
          \ minwidth: 30,
          \ maxwidth: 80,
          \ minheight: 3,
          \ title: ''
          \ })
  endif

  call s:UpdateSynStackBuffer(w:mayhem_synstack_popid)
endfunc

command! -bar SynStack call <SID>SynStack()

command! SynStackBuf vsp|enew|call <SID>UpdateSynStackBuffer(winnr())

function! s:SynStackClose(winid = win_getid()) abort
  let popid = getwinvar(winnr(a:winid), 'mayhem_synstack_popid', 0)
  if popid > 0 && !empty(popup_getpos(popid))
    call popup_close(popid)
  endif
endfunc

function! s:SynStackSetup() abort
  augroup MayhemSynStack
    autocmd!
    if exists(w:mayhem_synstack_enabled)
      autocmd CursorHold * if w:mayhem_synstack_enabled == 1 | call s:SynStack() | else |call s:SynStackClose() | endif
    endif
  augroup END
endfunc

function! s:SynStackDisable(winid = win_getid()) abort
  call setwinvar(winnr(a:winid), 'mayhem_synstack_enabled', 0)
  call s:SynStackSetup()
endfunc

function! s:SynStackEnable(winid = win_getid()) abort
  call setwinvar(winnr(a:winid), 'mayhem_synstack_enabled', 1)
  call s:SynStackSetup()
endfunc

function! s:SynStackToggle(winid = win_getid()) abort
  call setwinvar(winnr(a:winid), 'mayhem_synstack_enabled', !getwinvar(winnr(a:winid), 'mayhem_synstack_enabled', 0))
  call s:SynStackSetup()
endfunc

command! SynStackStatus echo get(s:, 'mayhem_synstack_enabled', 0)

command! -nargs=? SynStackAuto call <SID>SynStackEnable(<f-args>)

command! -nargs=? SynStackToggle call <SID>SynStackToggle(<f-args>)

command! HighlightThis hi <c-r><c-w>


" Insert a highlight entry for the current word
command! ExpandHlGroup call ExecAndPut('hi '..expand("<cword>"))


function! JumpToHighlightDefinition(hlname = expand("cword"))
  let file = ''
  let lnum = 0
  redir => output
  silent exec 'verbose hi '..a:hlname
  redir END
endfunc

command! -nargs=? JumpToHighlightDefinition call JumpToHighlightDefinition(<f-args>)


" Capture name of highlight
" '^:\?hi\w*\s\(link\|clear\)\@!\s*\zs\(\w\+\)\ze\s\+'
" Capture names in highlight link
" ^:\?hi\w*\s\+link\s\+\zs\(\w\+\)\s\+\(\w\+\)\ze\s\+

  " let matchid = matchadd(a:name, '^"\?:\?hi\w*\s\(link\|clear\)\@!\s*\zs' .. a:name .. '\ze\s\+', 10, -1)
  " %s/\(^\s*\||\s\+\)"\?:\?hi\w*\s\(\clear\)\@!\(link\)\?\s*\zs\(\w\+\)\ze\s\+/\=AddHighlightHighlight(submatch(0))/
  "echom a:name matchid

" :%s/^:\?hi\s\(link\|clear\)\@!\s*\zs\(\w\+\)\ze\s\+/\=AddHighlightHighlight(submatch(0))/
    "       '\(^\s*\||\s\+\)"\?:\?hi\w*\s\(\clear\)\@!\(link\)\?\s*\zs'



  " %g/^:\?hi\w*\s*\(clear\)\@!\(link\s*\)\?\<\zs\(\w\+\)\ze\>/echo s:AddSynMatch(submatch(0))
  " %g|^:\?hi\w*\s*\(clear\)\@!\(link\s*\)\?\<\zs\(\w\+\)\ze\>|exec 'syn match ' .. submatch(0) .. ' /\<' .. submatch(0).. '\>/ contained contains=NONE containedin=VimHiGroup'




"
" Highlight syntax group names with themselves
" Uses `matchadd()`, see :syn version above
"
" function! s:AddHighlightHighlight(name) abort
"   let matchid = matchadd(a:name, '\(^\s*\||\s\+\)"\?:\?hi\w*\s*\(clear\)\@!\(link\s\)\?\<\zs'..a:name..'\ze\>')
"   if matchid == -1
"     echo 'HiHi:AddHighlightHighlight: Empty matchid returned'
"   else 
"     if exists('w:highlighthighlights') && type(w:highlighthighlights) == type([])
"       call add(w:highlighthighlights, matchid)
"     else
"       let w:highlighthighlights = [ matchid ]
"     endif
"   endif
"   return a:name
" endfunc

" function! s:ToggleHighlightHighlight() abort
"   if empty(get(w:, 'highlighthighlights', [])) 
"     %s/^:\?hi\w*\s*\(clear\)\@!\(link\s*\)\?\<\zs\(\w\+\)\ze\>/\=s:AddHighlightHighlight(submatch(0))/n
"   else
"     for matchid in get(w:, 'highlighthighlights', [])
"       call matchdelete(matchid)
"     endfor
"     let w:highlighthighlights = []
"   endif
" endfunc

" command! HiHiMatch call <SID>ToggleHighlightHighlight()
