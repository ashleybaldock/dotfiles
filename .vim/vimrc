set encoding=utf-8
scriptencoding utf-8
set nocompatible

let g:coc_node_path = '/opt/homebrew/bin/node'

let $VIMHOME=expand('<sfile>:p:h')

let g:mayhem_dir_backup    = $VIMHOME .. '/backup'
let g:mayhem_dir_swap      = $VIMHOME .. '/swap'
let g:mayhem_dir_undo      = $VIMHOME .. '/undo'
let g:mayhem_dir_view      = $VIMHOME .. '/view'
let g:mayhem_dir_session   = $VIMHOME .. '/session'
let g:mayhem_dir_templates = $VIMHOME .. '/templates'

if has("patch-8.1.0251")
  if !isdirectory(g:mayhem_dir_backup)
    echom 'backup dir ''' .. g:mayhem_dir_backup
          \ .. '''not found- creating it'
    call mkdir(g:mayhem_dir_backup, "p", 0711)
  endif
  set writebackup
  set nobackup
  set backupcopy=auto
  exec 'set backupdir^=' .. g:mayhem_dir_backup .. '//'
end

if !isdirectory(g:mayhem_dir_swap)
  echom 'swap dir ''' .. g:mayhem_dir_swap
        \ .. '''not found- creating it'
  call mkdir(g:mayhem_dir_swap, "p", 0711)
endif
exec 'set directory-=~/tmp,/var/tmp,/tmp'
exec 'set directory+=' .. g:mayhem_dir_swap .. '//'

if !isdirectory(g:mayhem_dir_undo)
  echom 'undo dir ''' .. g:mayhem_dir_undo
        \ .. '''not found- creating it'
  call mkdir(g:mayhem_dir_undo, "p", 0711)
endif
set undofile
exec 'set undodir^=' .. g:mayhem_dir_undo .. '//'

if !isdirectory(g:mayhem_dir_view)
  echom 'view dir ''' .. g:mayhem_dir_view
        \ .. '''not found- creating it'
  call mkdir(g:mayhem_dir_view, "p", 0711)
endif
exec 'set viewdir^=' .. g:mayhem_dir_view .. '//'

if !isdirectory(g:mayhem_dir_session)
  echom 'session dir ''' .. g:mayhem_dir_session
        \ .. '''not found- creating it'
  call mkdir(g:mayhem_dir_session, "p", 0711)
endif

if !isdirectory(g:mayhem_dir_templates)
  echom 'templates dir ''' .. g:mayhem_dir_templates
        \ .. '''not found- creating it'
  call mkdir(g:mayhem_dir_templates, "p", 0711)
endif

set helpheight=10

set t_Co=256
set background=dark
set linespace=0
set breakindent
" set breakat= 	!@*-+;:,./?

" fallback for ./plugins/chars.vim
set showbreak=\\
set listchars=eol:¬¨,tab:>-,trail:~,extends:>,precedes:<
let g:mayhem_hide_list_in_visual = 1
let g:mayhem_default_list_style = 'none'
let g:mayhem_curhold_highlights = 1
let g:mayhem_show_unsaved_duration = 800
let g:mayhem_sync_start_max_lines = 800
let g:mayhem_move_after = '<Right>'
let g:mayhem_home_autoload_session = 0

" Visual bell + error flash off
autocmd! GUIEnter * set vb t_vb=

set timeout timeoutlen=3000 ttimeoutlen=100

if has('gui_running')
  let no_buffers_menu = 1
  let did_install_syntax_menu = 1
  let macvim_skip_colorscheme = 1

  colorscheme vividmayhem

  set wincolor=WinNormal

  if !exists("g:syntax_on")
    syntax enable
  endif

  set guioptions-=rL
  set guioptions+=ckT
  set guicursor+=a:blinkon0
  set antialias
  set guifont=Menlo:h14

  augroup Focus
    autocmd!
    au FocusGained * :redraw!
  augroup END

  set cursorline
  set cursorlineopt=screenline,number
  augroup Cursorline
    autocmd!
    au WinLeave * set cursorlineopt=number
    au WinEnter * set cursorlineopt=screenline,number
  augroup END
else
  colorscheme termayhem

  if !exists("g:syntax_on")
    syntax enable
  endif

  set ttyfast

  if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
  endif

  " We have a fast terminal
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    " Breaks multi-character insert mode mappings
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=3000
  augroup END
endif

set regexpengine=0

filetype plugin indent on
set ts=2 sts=2 sw=2 et

set mouse=a
set backspace=indent,eol,start

set updatetime=300
set synmaxcol=1024

set foldnestmax=4
set foldminlines=3

set cmdheight=1
set equalalways
set eadirection=hor
set splitbelow
set splitright
set splitkeep=cursor

set previewheight=8
set winheight=14
set winminheight=0
set nrformats-=octal
set smarttab
set laststatus=2
set wildmenu
set wildoptions=pum
set pumwidth=30
set pumheight=30
set display+=lastline
set autoread
set showcmd
set shortmess+=sAIt
let g:netrw_banner=0
let g:netrw_fastbrowse=0

" ftplugin/vim.vim
let no_vim_maps = 1

if !&scrolloff
  set scrolloff=1
endif

if &history < 1000
  set history=1000
endif
if &tabpagemax < 50
  set tabpagemax=50
endif
if !empty(&viminfo)
  set viminfo^=!
endif
set sessionoptions-=options

" Delete comment character when joining commented lines
set formatoptions+=j
set delcombine
set virtualedit=block

set completeopt=longest,menuone,noinsert

" Searching
set hlsearch
set incsearch
" search up to root when using gf, opening files etc.
set path+=;~

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Syntax highlighting for code blocks inside markdown docs
let g:markdown_fenced_languages = ['javascript', 'typescript', 'css', 'json', 'python', 'lua', 'vim', 'sh']


" 2html script options
let g:html_line_ids=1
let g:html_ignore_folding=1
" let g:html_dynamic_folds=
" let g:html_no_foldcolumn=
let g:html_prevent_copy='fntd'
let g:html_use_input_for_pc='none'
let g:html_no_modeline=0
let g:html_no_links=0
let g:html_use_encoding='UTF-8'
let g:html_font='monospace'


" Coc settings
let g:coc_enable_locationlist = 0
let g:coc_border_joinchars = ['‚î¨','‚î§','‚î¥','‚îú']
let g:coc_borderchars  = [' ','‚é•',' ','‚é¢','‚éõ','‚éû','‚é†','‚éù']
"g:coc_prompt_win_width = 32
"g:coc_notify_error_icon = 
"g:coc_notify_warning_icon =
"g:coc_notify_info_icon = 

"let g:coc_uri_prefix_replace_patterns = {'/Users': '/home'}
"let g:coc_global_extensions = ['coc-json', 'coc-git']
"g:coc_list_preview_filetype
"g:coc_start_at_startup = 1
"g:coc_text_prop_offset = 1000
"g:coc_filetype_map (coc-document-filetype)
"g:coc_node_path
"g:coc_node_args
"
"g:coc_quickfix_open_command = copen (copen|cfirst)
"g:coc_open_url_command


" CtrlP
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_root_markers = ['.git', '.root']
let g:ctrlp_match_window = 'top,order:btt,min:1,max:6,results:20'

let g:jsx_ext_required = 0


" Prettier
let g:prettier#autoformat = 0
let g:prettier#autoformat_config_present = 0
let g:prettier#exec_cmd_path = "~/.vim/node_modules/prettier"
let g:prettier#exec_cmd_async = 1
let g:prettier#quickfix_enabled  = 1
let g:prettier#quickfix_auto_focus = 0
" %!npx prettier --stdin-filepath %


" GitGutter
let g:gitgutter_sign_priority = 1
let g:gitgutter_map_keys = 0
let g:gitgutter_max_signs = 500
" g:gitgutter_sign_column_always = 0
" let g:gitgutter_realtime = 0
" let g:gitgutter_eager = 0
" let g:gitgutter_diff_base = '<commit SHA>'
" let g:gitgutter_diff_args = '-w'
" if executable('ag')
"   let g:gitgutter_grep = 'ag --vimgrep'
" endif
let g:gitgutter_set_sign_backgrounds = 0
let g:gitgutter_override_sign_column_highlight = 0
let g:gitgutter_preview_win_floating = 1
let g:gitgutter_sign_added                   = '+'
let g:gitgutter_sign_modified                = 'ê∞á'
let g:gitgutter_sign_removed                 = '‚óá'
let g:gitgutter_sign_removed_first_line      = '‚óáÃÖ'
let g:gitgutter_sign_removed_above_and_below = '‚óáÃÖÃ≤'
let g:gitgutter_sign_modified_removed        = '‚óáÃ≤'


"vim-qf
" let g:qf_loclist_window_bottom = 0
" let g:qf_window_bottom = 0
" let g:qf_mapping_ack_style = 1
" let g:qf_auto_resize = 0
" let g:qf_auto_open_loclist = 0
" let g:qf_auto_open_quickfix = 0
" let g:qf_max_height = 8


" let g:quickr_preview_keymaps = 0
" let g:quickr_preview_position = 'right'
" let g:quickr_preview_size = '0'
" let g:quickr_preview_line_hl = "Search"
" let g:quickr_preview_options = 'number norelativenumber nofoldenable '
" let g:quickr_preview_on_cursor = 1
" let g:quickr_preview_exit_on_enter = 1
" let g:quickr_preview_modifiable = 0

" vim:set ft=vim et sw=2:
