/*! <div class="nths"><div style="" class="nth"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div style="" class="nth"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div data-nth="odd"></div><div data-nth="even"></div><div data-nth="2n"></div><div data-nth="2n+1"></div><div data-nth="2n-1"></div><div data-nth="-2n+1"></div><div data-nth="-2n-1"></div></div> */

:is(section, .svgListing),
:is(section, .svgListing):has(> h2) {
  container-type: size;
  contain: size;
  grid-template-rows: subgrid 1fr 1fr;
  grid-template-columns: subgrid;
  contain: initial;
  container-type: initial;
  grid-auto-rows: 1fr;
  display: contents;
  grid-area: icons;
}

.iconRow:nth-child(6n + 3) {
  inset: 2vh 50vw auto auto;
}

:not(#a#b) .iconRow::after {
  content: 'n=' counter(idx);
}

.iconRow:last-child:nth-child(odd) {
  --i1: 1;
}
.iconRow:nth-child(-2n):not(:nth-child(4n)) {
  --i2: 1;
}
.iconRow:nth-child(-4n):not(:nth-child(8n)) {
  --i4: 1;
}
.iconRow:nth-child(8n):not(:nth-child(16n)) {
  --i8: 1;
}
.iconRow:nth-child(16n):not(:nth-child(32n)) {
  --i16: 1;
}
.iconRow:nth-child(32n):not(:nth-child(64n)) {
  --i32: 1;
}
.iconRow {
  --ix: calc(
    (1 * var(--i1, 0)) + (2 * var(--i2, 0)) + (4 * var(--i4, 0)) +
      (8 * var(--i8, 0)) + (16 * var(--i16, 0)) + (32 * var(--i32, 0))
  );
  inset: calc(var(--ix) * 1vw) calc(var(--ix) * 1vw) auto auto;
}
:not(#a#b) .iconRow::after {
  content: 'n=' counter(idx);
  counter-reset: idx var(--ix);
  display: flex;
  position: absolute;
  inset: -10px auto auto -10px;
  z-index: 100000;
}
/* .iconRow:nth-child(6n+2) {
  inset: 1vh 60vw auto auto;
}
.iconRow:nth-child(6n+3) {
  inset: 2vh 70vw auto auto;
}
.iconRow:nth-child(6n+4) {
  inset: 4vh 80vw auto auto;
}
.iconRow:nth-child(6n+5) {
  inset: 3vh 90vw auto auto;
}*/

.iconRow:nth-child(6n) {
  outline: 2px solid red;
}
.iconRow:nth-child(6n + 1) {
  outline: 2px solid orange;
}
.iconRow:nth-child(6n + 2) {
  outline: 2px solid yellow;
}
.iconRow:nth-child(6n + 3) {
  outline: 2px solid green;
}
.iconRow:nth-child(6n + 4) {
  outline: 2px solid blue;
}
.iconRow:nth-child(6n + 5) {
  outline: 2px solid purple;
}

.iconRow,
.iconRow .wrappedSVG,
.inner::before {
  background-color: #0000;
  box-shadow: 0 0 0 0 #0000;
}

.iconRow:nth-child(6n) {
  inset: 2vh 40vw auto auto;
}

body {
  column-gap: calc(var(--item-gap) * 8);
  grid-auto-rows: auto;
}

:is(section, .svgListing),
:is(section, .svgListing):has(> h2) {
  display: contents;
  grid-area: icons;
}
