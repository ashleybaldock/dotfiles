.svgActions {
  padding: calc(var(--icon-inset) * var(--pad-nearside) + var(--item-size))
    var(--icon-inset) calc(var(--icon-inset) * var(--pad-farside))
    var(--icon-inset);
  inset: calc(var(--item-size) - 4 * var(--item-gap)) auto auto auto;
  inset: unset;
  width: fit-content;
}

.iconRow .wrappedSVG {
  z-index: -1;
}

.svgListing {
  display: grid;
  grid-template-columns: repeat(auto-fit, var(--item-size));
  column-gap: calc(var(--item-gap) * 3);
  row-gap: calc(var(--item-gap) * 2);
}

.svgListing:has(> h2) {
  border-top-right-radius: 0;
}

.inner::before {
  aspect-ratio: 1;
  inset: unset;
  width: auto;
  place-self: center center;
}

.wrappedSVG.duplicate {
  display: none;
  grid-column: 2 / span 1;
  grid-row: 1;
  font-size: 2em;
}

.wrappedSVG.duplicate + .wrappedSVG.duplicate {
  grid-column: 3 / span 1;
  font-size: 1em;
}

:is(.iconRow:hover, .inner:hover, .outer:hover) .wrappedSVG.duplicate {
  display: grid;
}

.iconRow:hover .inner .svgActions ~ .wrappedSVG,
.iconRow:hover .wrappedSVG,
.wrappedSVG:hover {
  z-index: 2;
}

.inner::before,
.inner:hover::before,
:is(.iconRow:hover, .inner:hover, .outer:hover) .inner::before {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  inset: unset;
  justify-self: center;
  align-self: center;
  grid-column: 1/-1;
  grid-row: 1;
  aspect-ratio: unset;
  position: relative;
  width: calc(100% + var(--icon-inset) * 2.4);
  height: calc(100% + var(--icon-inset) * 2.4);
}
.inner,
.inner:hover {
  display: grid;
  grid-template-rows: subgrid;
  place-items: center;
  align-self: center;
  width: 100%;
  column-gap: 2ch;
  grid-template-columns: 3em 3em 1em;
}

.iconRow,
.outer {
  display: grid;
  grid-template-rows: subgrid;
  grid-template-columns: subgrid;
  place-items: center;
  align-self: center;
}
.wrappedSVG {
  width: auto;
  aspect-ratio: 1;
}
.wrappedSVG.duplicate {
  height: auto;
  width: 100%;
  aspect-ratio: 1;
  max-height: unset;
  max-width: unset;
  grid-template: 1fr/1fr;
  margin: auto;
}

.wrappedSVG.duplicated,
.wrappedSVG.duplicated + .wrappedSVG.duplicate,
.wrappedSVG.duplicated + .wrappedSVG.duplicate + .wrappedSVG.duplicate {
  height: 1em;
}

.svgListing svg {
  max-height: 1em;
  height: 1em;
  width: auto;
}

.wrappedSVG:has(> [viewBox='0 0 640 640']) {
  padding: calc(0.01em * (var(--icon-padding, 16) - var(--icon-border, 3)));
  display: grid;
  grid-template-rows: subgrid;
  grid-template-columns: subgrid;
}

svg[viewBox='0 0 640 640'] {
  max-height: 1.1em;
  width: 1.1em;
  height: 1.1em;
  place-self: center;
}

.wrappedSVG:has(> [viewBox='0 0 640 640'])::after {
  bottom: -8px;
  border-radius: inherit;
  font-size: 8px;
  border: 0;
  color: #f0f;
  line-height: normal;
  display: flex;
  position: absolute;
  right: 2px;
  padding: 0.1em 0.6ch;
  letter-spacing: -0.08ch;
  font-family: Menlo, monospace;
  content: 'â–¡';
  top: -9px;
}

.iconRow:hover .wrappedSVG:has(> [viewBox='0 0 640 640'])::after {
  transform: scale(1.4) translate(4px, -4px);
}
.wrappedSVG:has(> [viewBox='0 0 640 640']) {
  max-height: unset;
  place-self: center;
}

.wrappedSVG,
.wrappedSVG:has(> [viewBox='0 0 640 640']) {
  grid-column: 1 / span 1;
  grid-row: 1;
  font-size: 3em;
  height: 1em;
  width: auto;
  aspect-ratio: 1;
  padding: 0.04em;
  place-content: center;
  grid-template: auto/auto;
  margin: 0-0.04em;
}

.wrappedSVG:has(> [viewBox='0 0 640 640'])
  ~ .wrappedSVG.duplicate:has(> [viewBox='0 0 640 640']),
.wrappedSVG ~ .wrappedSVG.duplicate {
  height: auto;
  width: 1em;
  grid-column: 2 / span 1;
  font-size: 2em;
}

.wrappedSVG:has(> [viewBox='0 0 640 640'])
  ~ .wrappedSVG.duplicate:has(> [viewBox='0 0 640 640'])
  ~ .wrappedSVG.duplicate:has(> [viewBox='0 0 640 640']),
.wrappedSVG ~ .wrappedSVG.duplicate ~ .wrappedSVG.duplicate {
  grid-column: 3 / span 1;
  font-size: 1.2em;
}

.wrappedSVG.duplicate + .wrappedSVG.duplicate,
.wrappedSVG.duplicate:has(> [viewBox='0 0 640 640'])
  + .wrappedSVG.duplicate:has(> [viewBox='0 0 640 640']) {
  grid-column: 3 / span 1;
  grid-row: 1;
  font-size: 1em;
}

.inner,
.inner:hover {
}

.wrappedSVG.duplicate,
.wrappedSVG.duplicate:has(> [viewBox='0 0 640 640']) {
  grid-column: 2 / span 1;
  grid-row: 1;
  font-size: 2em;
  height: fit-content;
  padding: 0.1em;
}

h2,
h3,
h4,
h5,
h6,
li,
ol,
ul {
  margin: 0;
  padding: 0;
  font-weight: 400;
  font-size: inherit;
  list-style-type: none;
}

.colnames,
.radiorow,
.radiorow > li {
  display: contents;
}

.controlgroup.overlap {
  width: auto;
  height: auto;
  font-size: 1em;
  row-gap: 0.2em;
}

.sourceOverlay {
  counter-increment: srcidx;
}
.sourceBase {
  counter-reset: srcidx;
  padding: 0.4em 0.6em;
}

.colnames > li {
  font-size: 0.8em;
  text-align: center;
  justify-self: center;
  display: grid;
}

section label {
  padding: 0;
}

.combineList label:has(> [type='radio']) {
  display: grid;
  grid-template: 1/1;
  place-content: center;
  place-self: center;
  width: 100%;
  height: 100%;
  background-size: contain;
  background-position: center;
  background-origin: content-box;
  background-repeat: no-repeat;
  min-height: 10vh;
  box-shadow:
    inset 1px 1px 1px 0#eee4,
    inset -1px -1px 2px 1px #000a;
  box-sizing: border-box;
  border: 1.5px dashed #0000;
  border-width: 1.5px 2px 2px 1.5px;
  border-radius: 2px/20px;
  transition: border 220ms ease;
}

.combineList [type='radio'] {
  visibility: hidden;
  width: 0;
  height: 0;
}

.combineList label:has(> [type='radio']:checked) {
  box-shadow:
    inset 1px 1px 1px 0#eee4,
    inset -1px -1px 2px 1px #000a;
}

.combineList label:has(> [type='radio']:checked, > [type='radio'][checked]) {
  box-shadow:
    inset 1px 1px 1px 0#eee4,
    inset -1px -1px 2px 1px #000a;
  border-color: #cccd #aaad #999d #bbbd;
  transition: border 120ms ease;
}

.combineList label:has(> [type='radio']):not(:has(> :checked, > [checked])) {
  cursor: pointer;
  transition: border 120ms ease;
}

.combineList
  label:has(> [type='radio']):not(:has(> :checked, > [checked])):hover {
  border-color: #cccf #aaaf #999f #bbbf;
  border-style: dotted;
  transition: border 120ms ease;
}

.combineList :is(h2, h3, h4, h5) {
  font-size: inherit;
  line-height: normal;
}

.svgListing h2 {
  max-width: 100vw;
  margin-left: auto;
  width: 93vw;
  flex: 1 1 90w;
  display: flex;
  text-align: end;
  align-items: end;
  align-content: end;
  justify-content: end;
  border: var(--section-border);
  border-inline-width: 0;
  padding-inline: 2ch;
  border-radius: var(--section-border-radius) 0 0 0;
  margin: calc(var(--section-border-width) * -2) -2ch 0-1ch;
  grid-row: 1;
  grid-column: 1/-1;
  position: sticky;
  background-color: #222;
}
:is(section, .svgListing):has(> h2) {
  position: sticky;
  border-top-right-radius: 0;
  border-top-left-radius: 0;
  width: auto;
}

:is(section, .svgListing) > h2 {
  position: sticky;
  top: 0;
  background-color: #222;
  width: 93vw;
  display: flex;
  text-align: end;
  align-items: end;
  align-content: end;
  justify-content: end;
  border: var(--section-border);
  border-inline-width: 0;
  padding-inline: 2ch;
  border-radius: var(--section-border-radius) 0 0 0;
  max-width: 100vw;
  inset: 20vh auto auto auto;
  margin: -57vh 0 57vh;
  grid-column: -2;
  min-width: var(--item-size);
  height: var(--item-size);
  grid-row: auto;
}
.svgCombiner > h3 {
  display: grid;
  place-content: center;
  place-items: center;
  grid-template-rows: 1fr auto 1fr;
}
:is(.sourceBase, .sourceOverlay) > h3 > span {
  font-size: 1.1em;
  visibility: hidden;
  display: none;
}
:is(.sourceBase, .sourceOverlay) > h3 > span::first-line {
  font-size: 0.8em;
  word-spacing: 10em;
  text-align: center;
}
.sourceOverlay > h3::after {
  content: '#' counter(srcidx);
  font-size: 1.2em;
  grid-row: 3 / span 1;
  align-self: end;
}
.sourceOverlay > h3::before {
  content: '+';
  font-size: 2em;
  position: relative;
  top: -50%;
  grid-row: 1 / span 1;
}

:is(.sourceBase, .sourceOverlay) > h3 > svg {
  font-size: 4em;
  height: 6em;
  grid-row: 2 / span 1;
}
.sourceBase > h3 > svg {
  font-size: 6em;
}

.controlgroup > h4 {
  font-size: 0.9em;
}

.controlgroup > h5 {
  display: grid;
  place-content: center;
  place-items: center;
  grid-template: 1fr 1fr/1fr;
}
.controlgroup > h5 > svg {
  font-size: 1.6em;
}

.controlgroup > h5 > span {
  font-size: 0.8em;
  align-self: end;
}

.iconRow,
.inner,
.inner:hover,
.outer {
  grid-template: 1fr/1fr;
  justify-self: center;
}

.iconRow {
  width: 100%;
  height: 100%;
  width: var(--item-size);
  height: var(--item-size);
}

body {
  --n-item: ;
  margin: 0.6em 10em 0.6em 0.6em;
  grid-template-columns: repeat(auto-fit, var(--item-size));
  grid-auto-rows: auto;
  margin: 0.6em var(--rightgutter) 0.6em 0.6em;
  overflow: hidden scroll;
  inset: auto;
  display: grid;
  grid-template-columns:
    repeat(auto-fit, [item-start]var(--item-size) [item-end])
    [label-start]10vw[label-end];
  column-gap: calc(var(--item-gap) * 4);
  width: calc(100vw - var(--rightgutter) - var(--leftmargin));
  grid-auto-flow: row dense;
  grid-auto-rows: var(--item-size);
  --rightgutter: 10vw;
  --leftmargin: 0.6em;
  width: 100vw;
  --n-items: round(
    down,
    (
      (100vw - var(--rightgutter) - var(--leftmargin)) /
        (var(--item-size) + var(--item-gap))
    ),
    1
  );
  row-gap: calc(var(--item-gap) * 4);
}

.subsection {
  grid-column: -2;
  display: grid;
  outline: 1px dashed #aaaa;
  position: sticky;
}

.inner::before {
  z-index: auto;
}

fieldset,
section {
  grid-column: 1/-1;
}

.iconRow:hover .inner .svgActions ~ .wrappedSVG,
.iconRow:hover .wrappedSVG,
.wrappedSVG:hover {
  align-self: start;
}

:is(section, .svgListing),
:is(section, .svgListing):has(> h2) {
  container-type: size;
  contain: size;
  background-color: #0000;
  border: 0;
  box-shadow: none;
  bottom: 0;
  top: 0;
  z-index: unset;
  margin: 0 max(10vw, 100px) 0 0;
  height: auto;
}
.svgListing:not(:has(> h2))::before {
  inset: 20vh auto auto auto;
  content: 'nameless';
  font-style: italic;
  letter-spacing: 0.2ch;
}
.svgListing:not(:has(> h2))::before,
:not(#a#b) :is(section, .svgListing) > h2 {
  inset: var(--voff) auto calc(var(--voff) * -1) auto;
  margin: calc(var(--voff) * -1) 0 var(--voff) 0;
  grid-column: -1;
  min-width: var(--item-size);
  height: var(--item-size);
  grid-row: auto;
  --voff: -10vh;
  border-radius: 0;
  background-color: #a4a4;
}

.inner,
.inner:hover,
.outer {
  place-self: center;
}

.inner::before,
.inner:hover::before,
:is(.iconRow:hover, .inner:hover, .outer:hover) .inner::before {
  grid-template: 1fr/1fr;
}

.iconRow .wrappedSVG {
  place-self: center;
  place-content: center;
  place-items: center;
}

.svgActions {
  grid-area: 1/-1/1/-1;
  place-self: start center;
  place-content: center;
  place-items: center;
}

.iconRow {
  place-self: center;
  position: sticky;
  inset: auto auto auto auto;
  box-shadow: calc(var(--item-gap) * 1) calc(var(--item-gap) * 2) 0
    calc(var(--item-gap) * 2) #222;
}
