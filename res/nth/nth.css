@property --c-badge {
  syntax: '<color>';
  inherits: true;
  initial-value: #0000;
}
@property --badge-content {
  syntax: '<string>';
  inherits: true;
  initial-value: '';
}
@property --badge-transform {
  syntax: '<transform-list>';
  inherits: true;
  initial-value: none;
}

.nths {
  display: grid;
  grid-template-columns: repeat(20, 1fr);
  grid-template-rows: auto;
  grid-auto-rows: 1fr;
  place-content: center;
  place-items: center;
  grid-column: 1/-1;
}
.nths > [data-nth] {
  display: flex;
  width: auto;
  margin: 0;
  padding: 0.4em 1ch;
  letter-spacing: 0.1ch;
  grid-column-end: span 2;
}
.nths > [data-nth]::before {
  content: attr(data-nth);
}
.nth {
  position: relative;
  display: grid;
  column-gap: 0;
  grid-template-columns: subgrid;
  padding: 1ch;
  letter-spacing: normal;
  place-items: center;
  margin: 0 auto 0 auto;
  grid-column: 1/-1;
  counter-reset: count;
}
.nth > ::before {
  content: counter(count);
  grid-area: 1/1;
}
.nth > ::after {
  --badge-transform: rotate(-5deg) translate(0.1ch, 0.3lh);
  inset: auto -0.5ch -0.5lh auto;
  position: absolute;
  display: flex;
  width: auto;
  height: auto;
  padding: 0.2em 1ch;
  content: var(--badge-content);
  font-size: 0.56em;
  background-image: radial-gradient(
    farthest-side circle at top right,
    #000,
    40%,
    #222a
  );
  background-repeat: no-repeat;
  background-origin: border-box;
  background-clip: border-box;
  /*   backdrop-filter: blur(1px); */
  box-shadow: inset 0 0.25px 3px 0.5px var(--c-badge);
  border-radius: 0.25ch;
  transform: var(--badge-transform);
  filter: drop-shadow(1px 1px 2px #0006);
}
.nth > * {
  counter-increment: count;
  box-shadow: inset 0 0 4px 0.5px var(--c-badge);
}
.nth > div {
  position: relative;
  aspect-ratio: 1;
  display: grid;
  grid-template: 1fr/1fr;
  padding: 0.75ch;
  width: 1lh;
  height: auto;
  place-content: center;
  place-items: center;
  filter: drop-shadow(1px 1px 2px #0006);
  border-radius: 0.25ch;
}
[data-nth] {
  box-shadow: inset 0 0 4px 0.5px var(--c-badge);
  letter-spacing: 0.18ch;
  border-radius: 0.25ch;
  filter: drop-shadow(1px 1px 2px #0006);
}

.nths:has([data-nth='even']:hover, .nth > :nth-child(even):hover)
  :where([data-nth='even'], .nth > :nth-child(even)) {
  --c-badge: #66d;
  --badge-content: 'even';
}
.nths:has(> [data-nth='odd']:hover, > .nth > :nth-child(odd):hover)
  :where([data-nth='odd'], .nth > :nth-child(odd)) {
  --c-badge: #d66;
  --badge-content: 'odd';
}

.nths:has(> [data-nth='2n-1']:hover, > .nth > :nth-child(2n-1):hover)
  :where([data-nth='2n-1'], .nth > :nth-child(2n-1)) {
  --c-badge: #393;
  --badge-content: '2n-1';
}
.nths:has(> [data-nth='2n']:hover, > .nth > :nth-child(2n):hover)
  :where([data-nth='2n'], .nth > :nth-child(2n)) {
  --c-badge: #d66;
  --badge-content: '2n';
}
.nths:has(> [data-nth='2n+1']:hover, > .nth > :nth-child(2n + 1):hover)
  :where([data-nth='2n+1'], .nth > :nth-child(2n + 1)) {
  --c-badge: #6d6;
  --badge-content: '2n+1';
}

.nths:has(> [data-nth='-2n-1']:hover, > .nth > :nth-child(-2n-1):hover)
  :where([data-nth='-2n-1'], .nth > :nth-child(-2n-1)) {
  --c-badge: #399;
  --badge-content: '-2n-1';
}
.nths:has(> [data-nth='-2n']:hover, > .nth > :nth-child(-2n):hover)
  :where([data-nth='-2n'], .nth > :nth-child(-2n)) {
  --c-badge: #d66;
  --badge-content: '-2n';
}
.nths:has(> [data-nth='-2n+1']:hover, > .nth > :nth-child(-2n + 1):hover)
  :where([data-nth='-2n+1'], .nth > :nth-child(-2n + 1)) {
  --c-badge: #993;
  --badge-content: '-2n+1';
}
