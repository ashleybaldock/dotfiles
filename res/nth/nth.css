@property --c-badge {
  syntax: '<color>';
  inherits: true;
  initial-value: #0000;
}
@property --badge-content {
  syntax: '<string>';
  inherits: true;
  initial-value: '';
}
@property --badge-transform {
  syntax: '<transform-list>';
  inherits: true;
  initial-value: none;
}

.nths {
  display: grid;
  grid-template-columns: repeat(20, 1fr);
  grid-template-rows: auto;
  grid-auto-rows: 1fr;
  place-content: center;
  place-items: center;
  grid-column: 1/-1;
}
.nths > h3 {
  grid-column: 1/-1;
  justify-self: start;
  font-family: Menlo, monospace;
  font-weight: 400;
  letter-spacing: 0.1ch;
  font-size: 1rem;
}
.nths > [data-nth] {
  display: flex;
  width: auto;
  margin: 0;
  padding: 0.4em 1ch;
  letter-spacing: 0.1ch;
  grid-column-end: span 2;
  font-family: Menlo, monospace;
  justify-self: end;
  justify-content: end;
  min-width: 5ch;
  cursor: pointer;
}
.nths > [data-nth].fade {
  opacity: 0.4;
  cursor: auto;
}
.nths > [data-nth]::before {
  content: attr(data-nth);
}
.nth,
.nthl {
  position: relative;
  display: grid;
  column-gap: 0;
  grid-template-columns: subgrid;
  padding: 1ch;
  letter-spacing: normal;
  place-items: center;
  margin: 0 auto 0 auto;
  grid-column: 1/-1;
  counter-reset: count;
}
:where(.nth, .nthl) > ::before {
  content: counter(count);
  grid-area: 1/1;
}
:where(.nth, .nthl) > ::after {
  --badge-transform: rotate(-5deg) translate(0.1ch, 0.3lh);
  inset: auto -0.5ch -0.5lh auto;
  position: absolute;
  display: flex;
  width: auto;
  height: auto;
  padding: 0.2em 1ch;
  content: var(--badge-content);
  letter-spacing: 0.18ch;
  font-size: 0.56em;
  background-image: radial-gradient(
    farthest-side circle at top right,
    #000,
    40%,
    #222a
  );
  background-repeat: no-repeat;
  background-origin: border-box;
  background-clip: border-box;
  /*   backdrop-filter: blur(1px); */
  box-shadow: inset 0 0.25px 3px 0.5px var(--c-badge);
  border-radius: 0.25ch;
  transform: var(--badge-transform);
  filter: drop-shadow(1px 1px 2px #0006);
}
:where(.nth, .nthl) > * {
  counter-increment: count;
  box-shadow: inset 0 0 4px 0.5px var(--c-badge);
}
:where(.nth, .nthl) > div {
  position: relative;
  aspect-ratio: 1;
  display: grid;
  grid-template: 1fr/1fr;
  padding: 0.75ch;
  width: 1lh;
  height: auto;
  place-content: center;
  place-items: center;
  filter: drop-shadow(1px 1px 2px #0006);
  border-radius: 0.25ch;
}
[data-nth] {
  box-shadow: inset 0 0 4px 0.5px var(--c-badge);
  letter-spacing: 0.18ch;
  border-radius: 0.25ch;
  filter: drop-shadow(1px 1px 2px #0006);
}

.end {
  grid-column: auto/-1;
}

.nths:has(
    > [data-nth='even']:hover,
    > [data-nth='2n']:hover,
    > [data-nth='2n+2']:hover,
    > [data-nth='2n-2']:hover,
    .nth > :nth-child(even):hover
  )
  :where([data-nth='even'], .nth > :nth-child(even)) {
  --c-badge: #66d;
  --badge-content: 'even';
}
.nths:has(> [data-nth='odd']:hover, > .nth > :nth-child(odd):hover)
  :where([data-nth='odd'], .nth > :nth-child(odd)) {
  --c-badge: #d66;
  --badge-content: 'odd';
}

.nths:has(> [data-nth='n-2']:hover, > .nthl > :nth-last-child(n-2):hover)
  :where([data-nth='n-2'], .nthl > :nth-last-child(n-2)),
.nths:has(> [data-nth='n-2']:hover, > .nth > :nth-child(n-2):hover)
  :where([data-nth='n-2'], .nth > :nth-child(n-2)) {
  --c-badge: #699;
  --badge-content: 'n-2';
}
.nths:has(> [data-nth='n-1']:hover, > .nthl > :nth-last-child(n-1):hover)
  :where([data-nth='n-1'], .nthl > :nth-last-child(n-1)),
.nths:has(> [data-nth='n-1']:hover, > .nth > :nth-child(n-1):hover)
  :where([data-nth='n-1'], .nth > :nth-child(n-1)) {
  --c-badge: #699;
  --badge-content: 'n-1';
}
.nths:has(> [data-nth='n']:hover, > .nthl > :nth-last-child(n):hover)
  :where([data-nth='n'], .nthl > :nth-last-child(n)),
.nths:has(> [data-nth='n']:hover, > .nth > :nth-child(n):hover)
  :where([data-nth='n'], .nth > :nth-child(n)) {
  --c-badge: #699;
  --badge-content: 'n';
}
.nths:has(> [data-nth='n+1']:hover, > .nthl > :nth-last-child(n + 1):hover)
  :where([data-nth='n+1'], .nthl > :nth-last-child(n + 1)),
.nths:has(> [data-nth='n+1']:hover, > .nth > :nth-child(n + 1):hover)
  :where([data-nth='n+1'], .nth > :nth-child(n + 1)) {
  --c-badge: #699;
  --badge-content: 'n+1';
}
.nths:has(> [data-nth='n+2']:hover, > .nthl > :nth-last-child(n + 2):hover)
  :where([data-nth='n+2'], .nthl > :nth-last-child(n + 2)),
.nths:has(> [data-nth='n+2']:hover, > .nth > :nth-child(n + 2):hover)
  :where([data-nth='n+2'], .nth > :nth-child(n + 2)) {
  --c-badge: #699;
  --badge-content: 'n+2';
}

.nths:has(> [data-nth='-n-2']:hover, > .nthl > :nth-last-child(-n-2):hover)
  :where([data-nth='-n-2'], .nthl > :nth-last-child(-n-2)),
.nths:has(> [data-nth='-n-2']:hover, > .nth > :nth-child(-n-2):hover)
  :where([data-nth='-n-2'], .nth > :nth-child(-n-2)) {
  --c-badge: #9dd;
  --badge-content: '-n-2';
}
.nths:has(> [data-nth='-n-1']:hover, > .nthl > :nth-last-child(-n-1):hover)
  :where([data-nth='-n-1'], .nthl > :nth-last-child(-n-1)),
.nths:has(> [data-nth='-n-1']:hover, > .nth > :nth-child(-n-1):hover)
  :where([data-nth='-n-1'], .nth > :nth-child(-n-1)) {
  --c-badge: #9dd;
  --badge-content: '-n-1';
}
.nths:has(> [data-nth='-n']:hover, > .nthl > :nth-last-child(-n):hover)
  :where([data-nth='-n'], .nthl > :nth-last-child(-n)),
.nths:has(> [data-nth='-n']:hover, > .nth > :nth-child(-n):hover)
  :where([data-nth='-n'], .nth > :nth-child(-n)) {
  --c-badge: #9dd;
  --badge-content: '-n';
}
.nths:has(> [data-nth='-n+1']:hover, > .nthl > :nth-last-child(-n + 1):hover)
  :where([data-nth='-n+1'], .nthl > :nth-last-child(-n + 1)),
.nths:has(> [data-nth='-n+1']:hover, > .nth > :nth-child(-n + 1):hover)
  :where([data-nth='-n+1'], .nth > :nth-child(-n + 1)) {
  --c-badge: #9dd;
  --badge-content: '-n+1';
}
.nths:has(> [data-nth='-n+2']:hover, > .nthl > :nth-last-child(-n + 2):hover)
  :where([data-nth='-n+2'], .nthl > :nth-last-child(-n + 2)),
.nths:has(> [data-nth='-n+2']:hover, > .nth > :nth-child(-n + 2):hover)
  :where([data-nth='-n+2'], .nth > :nth-child(-n + 2)) {
  --c-badge: #9dd;
  --badge-content: '-n+2';
}

.nths:has(> [data-nth='2n-2']:hover, > .nthl > :nth-last-child(2n-2):hover)
  :where([data-nth='2n-2'], .nthl > :nth-last-child(2n-2)),
.nths:has(> [data-nth='2n-2']:hover, > .nth > :nth-child(2n-2):hover)
  :where([data-nth='2n-2'], .nth > :nth-child(2n-2)) {
  --c-badge: #393;
  --badge-content: '2n-2';
}
.nths:has(> [data-nth='2n-1']:hover, > .nthl > :nth-last-child(2n-1):hover)
  :where([data-nth='2n-1'], .nthl > :nth-last-child(2n-1)),
.nths:has(> [data-nth='2n-1']:hover, > .nth > :nth-child(2n-1):hover)
  :where([data-nth='2n-1'], .nth > :nth-child(2n-1)) {
  --c-badge: #393;
  --badge-content: '2n-1';
}
.nths:has(> [data-nth='2n']:hover, > .nthl > :nth-last-child(2n):hover)
  :where([data-nth='2n'], .nthl > :nth-last-child(2n)),
.nths:has(> [data-nth='2n']:hover, > .nth > :nth-child(2n):hover)
  :where([data-nth='2n'], .nth > :nth-child(2n)) {
  --c-badge: #6d6;
  --badge-content: '2n';
}
.nths:has(> [data-nth='2n+1']:hover, > .nthl > :nth-last-child(2n + 1):hover)
  :where([data-nth='2n+1'], .nthl > :nth-last-child(2n + 1)),
.nths:has(> [data-nth='2n+1']:hover, > .nth > :nth-child(2n + 1):hover)
  :where([data-nth='2n+1'], .nth > :nth-child(2n + 1)) {
  --c-badge: #393;
  --badge-content: '2n+1';
}
.nths:has(> [data-nth='2n+2']:hover, > .nthl > :nth-last-child(2n + 2):hover)
  :where([data-nth='2n+2'], .nthl > :nth-last-child(2n + 2)),
.nths:has(> [data-nth='2n+2']:hover, > .nth > :nth-child(2n + 2):hover)
  :where([data-nth='2n+2'], .nth > :nth-child(2n + 2)) {
  --c-badge: #393;
  --badge-content: '2n+2';
}

.nths:has(> [data-nth='-2n-2']:hover, > .nthl > :nth-last-child(-2n-2):hover)
  :where([data-nth='-2n-2'], .nthl > :nth-last-child(-2n-2)),
.nths:has(> [data-nth='-2n-2']:hover, > .nth > :nth-child(-2n-2):hover)
  :where([data-nth='-2n-2'], .nth > :nth-child(-2n-2)) {
  --c-badge: #993;
  --badge-content: '-2n-2';
}
.nths:has(> [data-nth='-2n-1']:hover, > .nthl > :nth-last-child(-2n-1):hover)
  :where([data-nth='-2n-1'], .nthl > :nth-last-child(-2n-1)),
.nths:has(> [data-nth='-2n-1']:hover, > .nth > :nth-child(-2n-1):hover)
  :where([data-nth='-2n-1'], .nth > :nth-child(-2n-1)) {
  --c-badge: #993;
  --badge-content: '-2n-1';
}
.nths:has(> [data-nth='-2n']:hover, > .nthl > :nth-last-child(-2n):hover)
  :where([data-nth='-2n'], .nthl > :nth-last-child(-2n)),
.nths:has(> [data-nth='-2n']:hover, > .nth > :nth-child(-2n):hover)
  :where([data-nth='-2n'], .nth > :nth-child(-2n)) {
  --c-badge: #dd6;
  --badge-content: '-2n';
}
.nths:has(> [data-nth='-2n+1']:hover, > .nthl > :nth-last-child(-2n + 1):hover)
  :where([data-nth='-2n+1'], .nthl > :nth-last-child(-2n + 1)),
.nths:has(> [data-nth='-2n+1']:hover, > .nth > :nth-child(-2n + 1):hover)
  :where([data-nth='-2n+1'], .nth > :nth-child(-2n + 1)) {
  --c-badge: #993;
  --badge-content: '-2n+1';
}
.nths:has(> [data-nth='-2n+2']:hover, > .nthl > :nth-last-child(-2n + 2):hover)
  :where([data-nth='-2n+2'], .nthl > :nth-last-child(-2n + 2)),
.nths:has(> [data-nth='-2n+2']:hover, > .nth > :nth-child(-2n + 2):hover)
  :where([data-nth='-2n+2'], .nth > :nth-child(-2n + 2)) {
  --c-badge: #993;
  --badge-content: '-2n+2';
}

:where(.nth, .nthl) > ::before {
  content: var(--override-index, counter(count));
  grid-area: 1/1;
}
e .nths > * > :nth-child(n):not(:nth-child(2n)):nth-last-child(-n + 1) {
  outline: 2px dashed #faa;
  --override-index: '+2';
  counter-increment: sum 2;
}
.nths > * > :nth-child(2n):not(:nth-child(4n)):nth-last-child(-n + 2) {
  outline: 2px dashed #faa;
  --override-index: '+2';
  counter-increment: sum 2;
}
.nths > * > :nth-child(4n):not(:nth-child(8n)):nth-last-child(-n + 4) {
  outline: 2px dashed #f66;
  --override-index: '+4';
  counter-increment: sum 4;
}
.nths > * > :nth-child(8n):not(:nth-child(16n)):nth-last-child(-n + 8) {
  outline: 2px dashed #f00;
  --override-index: '+8';
  counter-increment: sum 8;
}
.nths > * > :nth-child(16n):not(:nth-child(32n)):nth-last-child(-n + 16) {
  outline: 2px dashed #a00;
  --override-index: '+16';
  counter-increment: sum 16;
}
.nths > * > :nth-child(32n):not(:nth-child(64n)):nth-last-child(-n + 32) {
  outline: 2px dashed #900;
  --override-index: '+32';
  counter-increment: sum 32;
}
.nths > * > :nth-child(64n):not(:nth-child(128n)):nth-last-child(-n + 64) {
  outline: 2px dashed #606;
  --override-index: '+64';
  counter-increment: sum 64;
}
.nths > .nth {
  counter-reset: sum 0;
}
.nths > .nth::after {
  content: '= ' counter(sum);
  outline: 1px solid #a0a;
  border-radius: 0.25ch;
  padding: 0.75ch;
  width: 1lh;
  height: auto;
}

/* 
.nths > * > :nth-child(2n):not(:nth-child(4n)):nth-last-child(-n+2) {
  outline: 2px dashed #afa;
}
.nths > * > :nth-child(4n):not(:nth-child(8n)):nth-last-child(-n+4) {
  outline: 2px dashed #6f6;
}
.nths > * > :nth-child(8n):not(:nth-child(16n)):nth-last-child(-n+8) {
  outline: 2px dashed #0f0;
}
.nths > * > :nth-child(16n):not(:nth-child(32n)):nth-last-child(-n+16) {
  outline: 2px dashed #0a0;
}
.nths > * > :nth-child(32n):not(:nth-child(64n)):nth-last-child(-n+32) {
  outline: 2px dashed #090;
}
.nths > * > :nth-child(64n):not(:nth-child(128n)):nth-last-child(-n+64) {
  outline: 2px dashed #066;
} */
