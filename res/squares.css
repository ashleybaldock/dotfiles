.squares {
  display: grid;
  width: auto;
  column-gap: 0;
  row-gap: 0;
  --size: calc(100cqw / var(--nw));
  --nw: 22;
  grid-template-columns: repeat(var(--nw), 1fr);
  grid-template-rows: repeat(var(--nh), 1fr);
  --nh: 30;
  height: auto;
  aspect-ratio: calc(var(--nw) / var(--nh));
  min-height: unset;
  min-width: unset;
  margin: 0 8px;
  background-color: #1a1a1a;
  background-image:
    repeating-linear-gradient(90deg, #111 0 1px, #1110 1px var(--size)),
    repeating-linear-gradient(0deg, #111 0 1px, #1110 1px var(--size));
  background-size: calc(100% / var(--nw)) calc(100% / var(--nh));
  background-origin: content-box;
  box-shadow:
    inset -1px -1px 3px -2px #fff,
    inset 1px 1px 3px -2px #000;
}
:root,
body {
  margin: 0;
  padding: 0;
  width: 100vw;
  max-width: 100vw;
}
@property --a {
  syntax: '<percentage>';
  inherits: true;
  initial-value: 0%;
}
@property --t {
  syntax: '<string>';
  inherits: true;
  initial-value: '';
}

.group {
  grid-column: 1/-1;
  grid-row: 1/-1;
  display: grid;
  grid-template-rows: subgrid;
  grid-template-columns: subgrid;
  pointer-events: none;
  position: relative;
}
.squares label {
  padding: 0 1ch;
  --c: #555a;
  white-space: nowrap;
  height: var(--size);
  width: fit-content;
  place-self: center start;
}
.squares label.end {
  place-self: center end;
}
.squares > .square,
.squares > .group > .square,
.squares > .group > label {
  --a: 60%;
  --xa: var(--x1) / var(--x2);
  --xb: var(--x) / calc(var(--x) + var(--w));
  --xx: var(--xa, var(--xb));
  grid-column: var(--xx);

  --ya: var(--y1) / var(--y2);
  --yb: var(--y) / calc(var(--y) + var(--h));
  --yy: var(--ya, var(--yb));
  grid-row: var(--yy);
  display: grid;
  background-color: hsl(from var(--c) h calc(s * 0.6) calc(l * 0.6) / var(--a));
  border-radius: 3px;
  align-items: center;
  justify-items: center;
  line-height: normal;
  text-shadow: var(--text-outline-thick);
  box-shadow:
    inset 1px 1px 3px -2px hsl(from #fff h s l / calc(var(--a) * 0.6)),
    inset -1px -1px 3px -2px hsl(from #000 h s l / calc(var(--a) * 0.6));
  pointer-events: all;
}
.square::after {
  content: var(--t, '');
}
.squares > .square:hover,
.squares > .group:has(> .square:hover, > label:hover) > :is(.square, label) {
  --a: 100%;
}

.squares label {
  overflow: visible;
  position: absolute;
  text-align: left;
  left: 0;
  visibility: hidden;
}
.squares label {
  padding: 0 1ch;
  --c: #555a;
  white-space: nowrap;
  width: fit-content;
  place-self: center start;
  font-size: 0.8em;
}

section.squares:nth-child(2) {
  width: 30%;
}
