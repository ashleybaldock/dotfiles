/*{{{1 @property */
@property --clienthmid {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --clientwmid {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --pixelw {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
@property --pixelh {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
@property --naturalw {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
@property --naturalh {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
@property --naturalmax {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
@property --naturalmin {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
@property --fitmaxh {
  syntax: '<number>';
  inherits: true;
  initial-value: 0.7;
}
@property --fitmaxw {
  syntax: '<number>';
  inherits: true;
  initial-value: 0.7;
}
@property --fith {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --fitw {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --h-if-fitw {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --h-if-fith {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --w-if-fitw {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --w-if-fith {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --imfittedh {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --imfittedw {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}

@property --imtop {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
@property --imright {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
@property --imbottom {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
@property --imleft {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}

/* Lengths */
@property --px-imwidth {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --px-imheight {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --px-imtop {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --px-imright {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --px-imbottom {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --px-imleft {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}

@property --px-pixelw {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --px-pixelh {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}

@property --dot-c {
  syntax: '<color>';
  inherits: false;
  initial-value: #fff;
}
@property --circle-c {
  syntax: '<color>';
  inherits: false;
  initial-value: #fff;
}
@property --dot-r {
  syntax: '<number>';
  inherits: false;
  initial-value: 0.2;
}
@property --circle-ri {
  syntax: '<number>';
  inherits: false;
  initial-value: 0.3;
}
@property --circle-ro {
  syntax: '<number>';
  inherits: false;
  initial-value: 0.4;
}

/* Selection (mouse positions) */
@property --selectXstart {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --selectYstart {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --selectXend {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --selectYend {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --selecting {
  syntax: '<integer>';
  inherits: true;
  initial-value: 0;
}
/*}}}1*/

@media not print {
  :root {
    --clienthmid: calc(round(down, var(--clienth), 2) * 0.5);
    --clientwmid: calc(round(down, var(--clientw), 2) * 0.5);

    --naturalmax: max(var(--naturalw), var(--naturalh));
    --naturalmin: max(var(--naturalw), var(--naturalh));
    --fith: calc(var(--clienth) * var(--fitmaxh));
    --fitw: calc(var(--clientw) * var(--fitmaxw));
    --h-if-fitw: calc(var(--fitw) / var(--naturalw) * var(--naturalh));
    --h-if-fith: var(--fith);
    --w-if-fith: calc(var(--fith) / var(--naturalh) * var(--naturalw));
    --w-if-fitw: var(--fitw);

    /* Pick best fit from width or height */
    --imfittedh: round(down, min(var(--h-if-fitw), var(--h-if-fith)), 1);
    --imfittedw: round(down, min(var(--w-if-fitw), var(--w-if-fith)), 1);
    /* Determine pixel display size */
    --pixelh: round(down, calc(var(--imfittedh) / var(--naturalh)), 1);
    --pixelw: round(down, calc(var(--imfittedw) / var(--naturalw)), 1);

    /* Pixel-aligned size of image for display */
    --imalignedh: calc(var(--pixelh) * var(--naturalh));
    --imalignedw: calc(var(--pixelw) * var(--naturalw));

    --imtop: calc(var(--clienthmid) - (var(--imalignedh) * 0.5));
    --imright: calc(var(--imleft) + var(--imalignedw));
    --imbottom: calc(var(--imtop) + var(--imalignedh));
    --imleft: calc(var(--clientwmid) - (var(--imalignedw) * 0.5));

    /* Lengths*/
    --px-imalignedh: calc(var(--imalignedh) * 1px);
    --px-imalignedw: calc(var(--imalignedw) * 1px);

    --px-imfittedh: calc(var(--imfittedh) * 1px);
    --px-imfittedw: calc(var(--imfittedw) * 1px);

    --px-imheight: var(--px-imalignedh);
    --px-imwidth: var(--px-imalignedw);

    --px-imtop: calc(var(--imtop) * 1px);
    --px-imright: calc(var(--imright) * 1px);
    --px-imbottom: calc(var(--imbottom) * 1px);
    --px-imleft: calc(var(--imleft) * 1px);

    --px-pixelw: calc(var(--pixelw) * 1px);
    --px-pixelh: calc(var(--pixelh) * 1px);
    color: #eee;
    background-color: #222;
    scrollbar-color: #fffa #0000;
    background-image: linear-gradient(#141414, #1a1a1a, #141414);
    background-size: 100% 100%;
    background-position: 50% 50%;
    contain: size;
    container: imgonlychild size;

    --z-toggles-hint: 2;
    --z-toggles-menu: 3;
    --z-toggles-item: 4;
    --z-selection: 10;
    --z-selection-corner: 12;
    --z-selection-handle: 14;
  }
  :root:has(.tgl.sun :checked) {
    color: #222;
    background-color: #ddd;
    background-image: linear-gradient(#eaeaea, #eeeeee, #eaeaea);
  }
  :root:has(.tgl.tch :checked) {
    background-image: repeating-conic-gradient(
      from 0deg at 50% 50%,
      #606060 0 90deg,
      #585858 90deg 180deg
    );

    background-size: 40px 40px;
  }
  :root:has(.tgl.sun :checked):has(.tgl.tch :checked) {
    background-image: repeating-conic-gradient(
      from 0deg at 50% 50%,
      #909090 0 90deg,
      #a8a8a8 90deg 180deg
    );
  }

  /* Pixel mode */
  :root:has(.tgl.pix :checked) {
    background-image:
      linear-gradient(#1a1a1a44, #14141466, #1a1a1a66),
      repeating-conic-gradient(#444 0 90deg, #333 90deg 180deg);
    background-size:
      100vw 100vh,
      calc(var(--pixelw) * 2) calc(var(--pixelw) * 2);
    background-repeat: no-repeat, repeat;
    background-position:
      0 0,
      var(--imleft) var(--imtop);
  }
  :root:has(.tgl.pix :checked):has(.tgl.sun :checked) {
    background-image:
      linear-gradient(#1a1a1a44, #14141466, #1a1a1a66),
      repeating-conic-gradient(#555 0 90deg, #333 90deg 180deg);
    background-size:
      100vw 100vh,
      calc(var(--pixelw) * 2) calc(var(--pixelw) * 2);
    background-repeat: no-repeat, repeat;
    background-position:
      0 0,
      var(--imleft) var(--imtop);
  }

  /*{{{1 Thin-lined grid pixel hint */
  :root:has(.tgl.pix :checked):has(.tgl.grd :checked)::after {
    pointer-events: none;
    content: '';
    display: block;
    position: fixed;
    top: var(--px-imtop);
    left: var(--px-imleft);
    width: var(--px-imwidth);
    height: var(--px-imheight);
    box-sizing: content-box;
    --gridcolor: #1118;
    --gridlinehalfthickness: 0.5px;
    --gridlinefadeover: 0px;
    --glt: var(--gridlinehalfthickness);
    --glt2: calc(var(--glt) * 2);
    --glf: var(--gridlinefadeover);
    background:
      repeating-linear-gradient(
        360deg,
        var(--gcl) 0,
        var(--gcl0) var(--glt) var(--px-pixelw)
      ),
      repeating-linear-gradient(
        180deg,
        var(--gcd) 0,
        var(--gcd0) var(--glt) var(--px-pixelw)
      ),
      repeating-linear-gradient(
        450deg,
        var(--gcd) 0,
        var(--gcd0) var(--glt) var(--px-pixelw)
      ),
      repeating-linear-gradient(
        270deg,
        var(--gcl) 0,
        var(--gcl0) var(--glt) var(--px-pixelw)
      ),
      linear-gradient(#0000);
    background-position:
      0 0,
      100% 100%,
      0 0,
      100% 100%;
    background-size:
      calc(var(--px-pixelw) - var(--glt)) var(--px-pixelw),
      calc(var(--px-pixelw) - var(--glt)) var(--px-pixelw),
      var(--px-pixelw) calc(var(--px-pixelw) - var(--glt)),
      var(--px-pixelw) calc(var(--px-pixelw) - var(--glt)),
      0 0;
    background-repeat: round;
    --gcl: #aaa4;
    --gcl0: rgb(from var(--gcl) r g b / 0);
    --gcd: #0006;
    --gcd0: rgb(from var(--gcd) r g b / 0);
  }
  :root:has(.tgl.pix :checked):has(.tgl.sun :checked):has(
      .tgl.grd :checked
    )::after {
    --gridcolor: #3331;
  }
  :root:has(.tgl.pix :checked):has(.tgl.dbg :checked)::after {
    --gcl: #f00a;
    --gcl0: #00fa;
    --gcd: #ff0a;
    --gcd0: #0ffa;
  }
  /*}}}1*/

  /* Background for images with transparency */
  .transparent {
    background: #68686844;
  }
  :root:has(.tgl.sun :checked) .transparent {
    background: #78787844;
  }

  /* outline around image */
  :root:has(.tgl.out :checked) .transparent {
    background: #0000;
    outline: 1px dashed #888;
  }
  :root:has(.tgl.sun :checked):has(.tgl.out :checked) .transparent {
    outline: 1px dashed #aaa;
  }

  /* hatched box background */
  :root:has(.tgl.tch :checked) .transparent {
    background-image: repeating-conic-gradient(
      #383838 0 90deg,
      #484848 90deg 180deg
    );
    background-size: var(--pixelw) var(--pixelw);
    background-repeat: repeat;
    background-position: 0 0;
    border: 0;
    padding: 0;
  }
  :root:has(.tgl.sun :checked):has(.tgl.tch :checked) .transparent {
    background-image: repeating-conic-gradient(
      #686868 0 90deg,
      #787878 90deg 180deg
    );
    background-size: var(--pixelw) var(--pixelw);
    background-repeat: repeat;
    background-position: 0 0;
    border: 0;
    padding: 0;
  }

  body {
    min-height: 100vh;
    max-height: 100vh;
    min-width: 100vw;
    max-width: 100vw;
    border: 0;
    padding: 0;
    margin: 0;
    overflow: hidden;
  }

  li {
    padding: 0;
    margin: 0;
    border: none;
  }

  .output {
    visibility: hidden;
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    font-size: 0.8em;
    font-family: Menlo, monospace;
    color: var(--color);
    white-space: pre;
    text-align: center;
    line-height: 1.8;
    pointer-events: none;
    user-select: none;
  }
  .output.fixed {
    position: fixed;
  }
  .output.one > output::after {
    counter-reset: out var(--value);
    content: var(--prefix, '') counter(out) var(--suffix, '');
  }
  .output.two > output::after {
    counter-reset: outA var(--value) outB var(--value2);
    content: var(--prefix, '') counter(outA) var(--suffix, '')
      var(--prefix2, '') counter(outB) var(--suffix2, '');
  }

  /* debug labels for image fitting to client */
  :root:has(.tgl.dbg :checked) :is(.output.fitw, .output.fith) {
    visibility: visible;
  }
  .output.fitw,
  .output.fith {
    display: block;
    pointer-events: none;
    position: fixed;
    border-radius: 12px 2px 2px 2px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    filter: drop-shadow(1px 1px 1px #000a);
    border-style: solid;
    box-sizing: border-box;
  }
  .output.fith {
    border-width: 1px 3px 1px 3px;
    color: #b00;
    width: var(--w-if-fith);
    height: var(--h-if-fith);
  }
  .output.fitw {
    border-width: 3px 1px 3px 1px;
    width: var(--w-if-fitw);
    height: var(--h-if-fitw);
    color: #a48200;
  }
  .output.fitw::after,
  .output.fith::after {
    position: absolute;
    top: 0;
    left: 0;
    border: 2px solid currentColor;
    background-color: #000;
    padding: 4px 6px;
    border-radius: 12px 0 14px 0;
    border-style: solid groove groove solid;
    font-family: monospace;
    font-size: 0.8rem;
    letter-spacing: -0.08ch;
  }
  .output.fitw::after {
    margin: -2px 0 0 -1px;
    border-width: 2px 1.5px 1.5px 1px;
    content: 'fit w';
  }
  .output.fith::after {
    margin: -1px 0 0 -2px;
    border-width: 1px 1.5px 1.5px 2px;
    content: 'fit h';
  }

  /* labels for image width and height */
  :root:has(.tgl.dim :checked) :where(.output.width, .output.height) {
    visibility: visible;
  }
  .output.width,
  .output.height {
    --color: #888;
    --thickness: 2px;
    --endlength: calc(var(--thickness) * 5);
    --suffix: 'px';
  }
  .output.width {
    --prefix: 'width ';
    --value: var(--naturalw);
    /* top: calc(var(--imtop) - 1lh - var(--endlength)); */
    left: var(--imleft);
    width: var(--px-imwidth);
    padding-bottom: var(--endlength);
    background-repeat: no-repeat;

    bottom: var(--imbottom);
    background-image:
      linear-gradient(to top, var(--color) 0 var(--thickness), #fff0 0),
      linear-gradient(
        to right,
        var(--color) 0 var(--thickness),
        #fff0 var(--thickness) 100%
      ),
      linear-gradient(
        to left,
        var(--color) 0 var(--thickness),
        #fff0 var(--thickness) 100%
      );
    background-position:
      center center,
      right center,
      left center;
    background-size:
      100% var(--thickness),
      100% calc(var(--endlength) - var(--thickness)),
      100% calc(var(--endlength) - var(--thickness));
    height: calc(var(--endlength) * 3);
    right: var(--imright);
    overflow: visible;
  }
  .output.height {
    --prefix: 'height\0a ';
    --value: var(--naturalh);
    --suffix: 'px';
    top: var(--imtop);
    right: var(--imright);
    height: var(--px-imheight);
    padding-right: calc(var(--endlength) * 2);
    background-image:
      linear-gradient(to left, var(--color) 0 var(--thickness), #fff0 0),
      linear-gradient(to bottom, var(--color) 0 var(--thickness), #fff0 0),
      linear-gradient(to top, var(--color) 0 var(--thickness), #fff0 0);
    background-repeat: no-repeat;
    width: calc(var(--endlength) * 3);
    background-position: center center;
    background-size:
      var(--thickness) 100%,
      calc(var(--endlength) - var(--thickness)) 100%,
      calc(var(--endlength) - var(--thickness)) 100%;
    justify-content: end;
  }

  .output.client-size {
    --color: #888;
    --endlength: 0.5lh;
    --thickness: 2px;
    --prefix: 'viewport:\0a ';
    --value: var(--clientw);
    --suffix: '×';
    --value2: var(--clienth);
    --suffix2: 'px';
    top: 4px;
    left: 4px;
  }
  :root:has(.tgl.dim :checked) :where(.output.client-size) {
    visibility: visible;
  }

  /* the subject image */
  img {
    text-align: center;
    position: absolute;
    inset: 0;
    margin: auto;
  }
  /**
   * classes set by the browser to describe the image:
   *  .overflowingVertical  (zoomed in)
   *  .transparent          (background)
   */
  .overflowingVertical {
    margin-top: 0;
  }

  .completeRotation {
    transition: transform 0.3s ease 0s;
  }

  /**
   * classes set by companion userscript to describe the image:
   *  .tiny            (h + w < 200)
   *  .transparent     (background)
   */
  /* images below a threshold size optimised for pixel graphics */
  .tiny {
    width: var(--px-imwidth);
    height: var(--px-imheight);
    image-rendering: pixelated;
  }

  /*{{{1 Toggle controls */
  .toggles {
    --short-delay: 0ms;
    --long-delay: 2s;
    --short-duration: 120ms;
    --long-duration: 600ms;
    position: absolute;
    top: 0;
    left: 0;
    list-style-type: none;
    margin: 0 0;
    padding: 2px 0 0 2px;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    justify-content: center;
    column-gap: 1ch;
    row-gap: 1px;
    color: #eee;
    font-family: monospace;
    font-size: 0.8rem;
    transition: opacity var(--long-duration) ease var(--long-delay);
  }
  :root .toggles {
    pointer-events: none;
    z-index: var(--z-toggles-menu);
    position: fixed;
  }
  :root:hover .toggles,
  .toggles:hover {
    pointer-events: all;
  }
  :root .toggles::before {
    pointer-events: none;
    z-index: var(--z-toggles-hint);
    opacity: 0;
    padding: 1ch 0 0 0.5ch;
    width: auto;
    height: auto;
    content: '{…}';
    position: fixed;
    top: 0;
    left: 0;
    min-width: 10vw;
    min-height: 4vh;
    transition: opacity var(--short-duration) ease
      calc(var(--short-delay) + var(--long-delay));
  }
  :root:hover .toggles::before,
  .toggles:hover::before {
    opacity: 0.6;
    transition: opacity var(--long-duration) ease var(--short-delay);
  }
  :root:hover .toggles:hover::before {
    content: '{…}';
    transition: opacity var(--short-duration) ease var(--short-delay);
    opacity: 1;
  }
  body[data-selecting] .toggles {
    opacity: 0;
    pointer-events: none;
    display: none;
  }
  .toggles > .tgl {
    opacity: 0;
    z-index: var(--z-toggles-item);
    pointer-events: none;
    margin: 0;
    transition: opacity var(--long-duration) ease var(--long-delay);
    display: flex;
    align-items: center;
    justify-content: center;
    outline: none;
    user-select: none;
  }
  .toggles:hover > .tgl {
    opacity: 1;
    pointer-events: all;
    cursor: pointer;
    transition: opacity var(--short-duration) ease var(--short-delay);
  }
  .toggles > .tgl input {
    display: flex;
    align-items: center;
    justify-content: right;
    cursor: pointer;
  }
  .toggles > .tgl input[type='checkbox'],
  .toggles > .tgl input[type='radio'] {
    display: none;
  }
  .toggles > .tgl label {
    display: flex;
    align-items: center;
    cursor: pointer;
    padding: 0.1rem 0 0.1rem 0.3rem;
    border-radius: 0.3rem 1rem 1rem 0.3rem;
    background-color: #222a;
    border: 1px solid #777a;
    flex: 1 1 100%;
    justify-content: space-evenly;
  }
  .toggles > .tgl label::after {
    justify-self: end;
  }
  .toggles > .tgl label:has(> [type='checkbox']:disabled),
  .toggles > .tgl label:has(> [type='radio']:disabled) {
    color: #999;
    cursor: not-allowed;
  }

  .toggles > .tgl label:has(> [type='checkbox']) {
    --fade: 0.5px;
    --dot-r: 0.2;
    --circle-ri: 0.3;
    --circle-ro: 0.4;
    --dr: calc(var(--dot-r) * var(--u));
    --cri: calc(var(--circle-ri) * var(--u));
    --cro: calc(var(--circle-ro) * var(--u));
    --dot-c: currentColor;
    --circle-c: currentColor;
    --u: 1rem;
    text-align: center;
    flex: 1 0 auto;
    justify-content: space-between;
    align-items: center;
    background-color: #222;
    border-color: #000;
    box-shadow:
      inset -2px -3px 4px -2px #000,
      inset 1px 2px 4px -1px #666a;
    border-radius: 2px;
  }
  .toggles > .tgl label:has(> [type='checkbox']):hover {
    box-shadow:
      inset -2px -3px 4px -2px #0a0303,
      inset 1px 2px 4px -1px #c02626;
    border-color: #222 #2a2a2a #2a2a2a #222;
    background-color: #2e0f0f;
  }
  .toggles > .tgl label:has(> [type='checkbox'])::after {
    content: '';
    padding: 1px 0.4rem 1px 0;
    margin-left: 0.5ch;
    width: auto;
    height: 1lh;
    aspect-ratio: 1;
    box-sizing: content-box;
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: normal;
    --dot-c: transparent;
    background-image: radial-gradient(
      circle at center,
      var(--dot-c) 0 calc(var(--dr) - var(--fade)),
      transparent calc(var(--dr) + var(--fade)) calc(var(--cri) - var(--fade)),
      var(--circle-c) calc(var(--cri) + var(--fade))
        calc(var(--cro) - var(--fade)),
      transparent calc(var(--cro) + var(--fade)) 100%
    );
    transition: background-image 100ms ease 50ms;
    transition-property: --dot-c, --dot-r;
  }
  .toggles > .tgl.plain label:has(> [type='checkbox'])::after {
    content: '◯';
  }
  .toggles > .tgl label:has(> [type='checkbox']):hover::after {
    --dot-c: #999;
    --dot-r: 0.14;
    transition: all background-image 100ms ease 50ms;
  }
  .toggles > .tgl label:has(> [type='checkbox']:checked)::after {
    --dot-c: currentColor;
    --dot-r: 0.2;
    transition: all 100ms ease 50ms;
  }
  .toggles > .tgl.plain label:has(> [type='checkbox']:checked)::after {
    content: '◉';
  }
  .toggles > .tgl label:has(> [type='checkbox']:checked):hover::after {
    --dot-c: currentColor;
    --dot-r: 0.14;
    transition: all 100ms ease 50ms;
  }
  .toggles > .tgl label:has(> [type='checkbox']):active::after {
    --dot-c: #fff;
    --dot-r: 0.2;
    --circle-ri: 0.28;
    --circle-ro: 0.42;
    transition: all 100ms ease 50ms;
  }
  .toggles > .tgl label:has(> [type='checkbox']:checked):active::after {
    --dot-c: #fff;
    --dot-r: 0.2;
    --circle-ri: 0.28;
    --circle-ro: 0.42;
    transition: all 100ms ease 50ms;
  }
  .toggles > .tgl label:has(> [type='checkbox']:disabled)::after {
    --circle-c: #aaa;
    --dot-c: #333;
    --dot-r: 0.25;
    transition: all 100ms ease 50ms;
  }
  .toggles > .tgl.plain label:has(> [type='checkbox']:disabled)::after {
    content: '◌';
  }
  .toggles > .tgl label:has(> [type='checkbox'])::before {
    content: '';
    width: 0.5ch;
  }

  .toggles {
    --tg-is-selecting: ;
  }
  /*}}}1*/

  /*{{{1 Breadcrumb navigation */
  .breadcrumbs output::after {
    content: '';
  }
  .breadcrumbs {
    visibility: visible;
    font-size: 0.6rem;
    pointer-events: all;
    right: 0;
    border-radius: 0 0 0 10px;
    top: unset;
    bottom: 90px;
    justify-content: end;
    padding: 0;
    flex-direction: column;
    margin: 0;
    max-width: 100vw;
  }
  .breadcrumbs > ul {
    margin: 0;
    list-style-type: none;
    display: flex;
    align-items: center;
    user-select: all;

    --＋: 0.5px;
    --－: calc(var(--＋) * -1);
    --＝: 0;
    --🔸: 0px #000a;
    --text-outline-thin:
      var(--＋) var(--＝) var(--🔸), var(--＋) var(--＋) var(--🔸),
      var(--＝) var(--＋) var(--🔸), var(--－) var(--＋) var(--🔸),
      var(--－) var(--＝) var(--🔸), var(--－) var(--－) var(--🔸),
      var(--＝) var(--－) var(--🔸), var(--＋) var(--－) var(--🔸);
    padding: 0 var(--pad-right) 0.5ch var(--pad-left);
    max-width: calc(100vw - var(--pad-left) - var(--pad-right));
    flex-wrap: nowrap;
    --pad-left: 0.5ch;
    --pad-right: 0.5ch;
  }
  .breadcrumbs > ul > li {
    text-shadow: var(--text-outline-thin);
    color: #fff;
    letter-spacing: 0.06ch;
    flex: 0;
  }
  .breadcrumbs > ul > li > a {
    text-decoration: 0.5px solid underline;
    text-underline-offset: 2px;
    color: #83e1fe;
    cursor: pointer;
    text-shadow: var(--text-outline-thin);
  }
  .breadcrumbs > ul > li > a:hover {
    text-decoration: 1px solid underline;
    text-underline-offset: 1.5px;
  }
  .breadcrumbs > ul > li > a:active {
    text-decoration: 1px dashed underline;
    text-decoration-color: #f00;
  }
  .breadcrumbs > ul > li > a:visited {
    color: #83e1fe;
  }
  .breadcrumbs .sep {
    padding: 0 0.1ch 0 0.2ch;
    font-size: 0.7rem;
    text-shadow: var(--text-outline-thin);
    flex: 0 0;
  }
  .breadcrumbs .proto {
    text-shadow: var(--text-outline-thin);
    flex: 0 0;
  }
  .breadcrumbs .proto + .sep {
    padding: 0 0.3ch 0 0;
  }

  .breadcrumbs .name {
    min-width: 5ch;
    text-overflow: '';
    text-align: left;
    display: grid;
    grid-template-columns: 1fr;
    flex: 0 0 round(down, 50%, 1ch);
    overflow: clip;
    grid-template-rows: 1fr;
    gap: 0;
    max-width: round(down, 50%, 1ch);
    user-select: all;
  }

  .breadcrumbs .name::after,
  .breadcrumbs .name::before {
    display: inline-block;
    content: attr(data-filename);
    grid-row: 1;
    width: round(50%, 1ch);
    opacity: 0.7;
  }

  .breadcrumbs .name::after {
    width: 50%;
    direction: rtl;
    place-self: center start;
    color: #bff;
    text-overflow: '[..';
    margin-left: 50%;
    outline: 1px dashed red;
    overflow: hidden;
  }

  .breadcrumbs .name::before {
    direction: ltr;
    place-self: center end;
    color: #0f0;
    text-overflow: '.]' '[.';
    grid-column: 1;
  }

  .tiny {
    margin: 0;
    top: var(--px-imtop);
    left: var(--px-imleft);
    width: var(--px-imwidth);
    height: var(--px-imheight);
  }

  .output:where(
      .imtopleft,
      .imbottomright,
      .imdisplaywh,
      .imalignedwh,
      .pixelwh,
      .imtop,
      .imright,
      .imbottom,
      .imleft,
      .imdisplayh,
      .imdisplayw
    ) {
    font-size: 0.6rem;
    letter-spacing: 0.05ch;
    text-align: right;
    line-height: normal;
    visibility: visible;
  }
  .output.imdisplaywh {
    --value: var(--imfittedw);
    --value2: var(--imfittedh);
    --prefix: 'imfittedw: ';
    --suffix: ' ';
    --prefix2: 'imfittedh: ';
    --suffix2: '';
    top: 0;
    left: 70px;
  }
  .output.imalignedwh {
    --value: var(--imalignedw);
    --value2: var(--imalignedh);
    --prefix: 'imalignedw: ';
    --suffix: ' ';
    --prefix2: 'imalignedh: ';
    --suffix2: '';
    top: 20px;
    left: 70px;
  }
  .output.pixelwh {
    --value: var(--pixelw);
    --value2: var(--pixelh);
    --prefix: 'pixelw: ';
    --suffix: ' ';
    --prefix2: 'pixelh: ';
    --suffix2: '';
    top: 40px;
    left: 70px;
  }
  .output.imtopleft {
    --value: var(--imtop);
    --value2: var(--imleft);
    --prefix: 'imtop: ';
    --suffix: '\0a';
    --prefix2: 'imleft: ';
    --suffix2: '';
    top: var(--px-imtop);
    left: var(--px-imleft);
    text-align: left;
    line-height: normal;
  }
  .output.imbottomright {
    --value: var(--imbottom);
    --value2: var(--imright);
    --prefix: 'imbottom: ';
    --suffix: '\0a';
    --prefix2: 'imright: ';
    --suffix2: '';
    top: var(--px-imbottom);
    left: var(--px-imright);
    transform: translate(-100%, -100%);
  }

  .output.width {
    top: calc(var(--px-imtop) - 1lh - var(--endlength));
    left: var(--px-imleft);
    width: var(--px-imwidth);
  }
  .output.height {
    top: var(--px-imtop);
    right: var(--px-imright);
    height: var(--px-imheight);
  }
  .output.fitw {
    width: calc(var(--w-if-fitw) * 1px);
    height: calc(var(--h-if-fitw) * 1px);
  }
  .output.fith {
    width: calc(var(--w-if-fith) * 1px);
    height: calc(var(--h-if-fith) * 1px);
  }

  /* .selection { */
  /*   outline: var(--px-pixelw) dashed #f00; */
  /*   position: fixed; */
  /*   top: calc(var(--px-imtop) + (var(--minY) * 1px)); */
  /*   left: calc(var(--px-imleft) + (var(--minX) * 1px)); */
  /*   width: calc((var(--maxX) - var(--minX)) * 1px); */
  /*   height: calc((var(--maxY) - var(--minY)) * 1px); */
  /*   display: flex; */
  /*   --minX: min(var(--Xs), var(--Xe)); */
  /*   --maxX: max(var(--Xs), var(--Xe)); */
  /*   --minY: min(var(--Ys), var(--Ye)); */
  /*   --maxY: max(var(--Ys), var(--Ye)); */
  /*   --Xs: round(down, calc(var(--selectXstart) - var(--imleft)), var(--pixelw)); */
  /*   --Xe: round(down, calc(var(--selectXend) - var(--imleft)), var(--pixelw)); */
  /*   --Ys: round(down, calc(var(--selectYstart) - var(--imtop)), var(--pixelw)); */
  /*   --Ye: round(down, calc(var(--selectYend) - var(--imtop)), var(--pixelw)); */
  /*   outline-offset: 0; */
  /*   background-color: #f008; */
  /*   border: 0; */
  /*   padding: 0; */
  /* } */
  @property --off {
    syntax: '<length>';
    inherits: true;
    initial-value: 0;
  }
  @keyframes ants {
    0% {
      --off: 0px;
    }
    100% {
      --off: 4px;
    }
  }

  .selection {
    visibility: hidden;
    position: fixed;
    pointer-events: none;
    top: calc(var(--px-imtop) - var(--linew) + (var(--minY) * 1px));
    left: calc(var(--px-imleft) - var(--linew) + (var(--minX) * 1px));
    width: max(calc((var(--maxX) - var(--minX)) * 1px), var(--px-pixelw));
    height: max(calc((var(--maxY) - var(--minY)) * 1px), var(--px-pixelw));
    display: flex;
    --minX: min(var(--Xs), var(--Xe));
    --maxX: max(var(--Xs), var(--Xe));
    --minY: min(var(--Ys), var(--Ye));
    --maxY: max(var(--Ys), var(--Ye));
    --Xs: round(down, calc(var(--selectXstart) - var(--imleft)), var(--pixelw));
    --Xe: round(
      nearest,
      calc(var(--selectXend) - var(--imleft)),
      var(--pixelw)
    );
    --Ys: round(down, calc(var(--selectYstart) - var(--imtop)), var(--pixelw));
    --Ye: round(nearest, calc(var(--selectYend) - var(--imtop)), var(--pixelw));
    background-color: #0000;
    padding: 0;
    --linew: 1px;
    box-sizing: content-box;
    box-shadow:
      0 0 min(var(--px-pixelw), 0.5vw) -1px #000,
      inset 0 0 min(var(--px-pixelw), 0.5vw) -1px #000;
    background-origin: border-box;
    background-clip: border-box;
    border-radius: 1px;
    border: var(--linew) solid #0000;
    background-size:
      var(--linew) 100%,
      100% var(--linew),
      var(--linew) 100%,
      100% var(--linew);
    background-position:
      top left,
      top left,
      bottom right,
      bottom right;
    background-repeat: no-repeat;
    --rp: 309%;
    background-image:
      repeating-linear-gradient(
        0deg,
        var(--scl) var(--yoff) calc(var(--yoff) + var(--bgs2)),
        var(--scd) calc(var(--yoff) + var(--bgs2))
          calc(var(--yoff) + var(--bgs))
      ),
      repeating-linear-gradient(
        90deg,
        var(--scl) var(--xoff) calc(var(--xoff) + var(--bgs2)),
        var(--scd) calc(var(--xoff) + var(--bgs2))
          calc(var(--xoff) + var(--bgs))
      ),
      repeating-linear-gradient(
        180deg,
        var(--scl) var(--yoff) calc(var(--yoff) + var(--bgs2)),
        var(--scd) calc(var(--yoff) + var(--bgs2))
          calc(var(--yoff) + var(--bgs))
      ),
      repeating-linear-gradient(
        270deg,
        var(--scl) var(--xoff) calc(var(--xoff) + var(--bgs2)),
        var(--scd) calc(var(--xoff) + var(--bgs2))
          calc(var(--xoff) + var(--bgs))
      );
    animation: forwards ants infinite 300ms linear;
    --bgs2: calc(var(--bgs) * 0.5);
    --bgs: 4px;
    --xoff: var(--off);
    --yoff: var(--off);
    --off: 14px;
    --scl: #fff;
    --scd: #000;
  }

  .selection {
    position: relative;
    --handle-size: 8px;
    z-index: var(--z-selection);
    pointer-events: auto;
    cursor: grab;
  }
  :where([data-selection], [data-selecting]) > .selection {
    visibility: visible;
  }
  .selection > .handle {
    z-index: var(--z-selection-handle);
    pointer-events: auto;
    position: absolute;
    width: var(--size);
    height: auto;
    box-shadow:
      0 0 4px -1px #000,
      inset 0 0 2px 0 #000;
    border: 0.5px solid #fff;
    background-color: #0aa;
    border-radius: 50%;
    aspect-ratio: 1;
    --size: var(--handle-size);
    --half: calc(var(--handle-size) * 0.5);
    box-sizing: border-box;
    top: calc(50% - var(--half));
    bottom: calc(50% - var(--half));
    left: calc(50% - var(--half));
    right: calc(50% - var(--half));
    display: grid;
    grid-template: 1fr / 1fr;
  }
  .selection > .handle:hover {
    transform: scale(1.2);
  }
  .selection > .handle::before {
    content: '';
    width: max(calc(var(--size) * 3), calc(var(--px-pixelw) * 2));
    height: auto;
    aspect-ratio: 1;
    display: flex;
    box-shadow: inset 0 0 1px 1px #f0f4;
    grid-row: 1 / -1;
    grid-column: 1 / -1;
    place-self: center;
    position: absolute;
  }

  .selection > .handle.top {
    top: calc((var(--half) * -1) - 0.5px);
    bottom: unset;
    cursor: ns-resize;
  }
  .selection > .handle.right {
    left: unset;
    right: calc((var(--half) * -1) - 0.5px);
    cursor: ew-resize;
  }
  .selection > .handle.bottom {
    top: unset;
    bottom: calc((var(--half) * -1) - 0.5px);
    cursor: ns-resize;
  }
  .selection > .handle.left {
    right: unset;
    left: calc((var(--half) * -1) - 0.5px);
    cursor: ew-resize;
  }

  .selection > .handle.top.right {
    cursor: nesw-resize;
    z-index: var(--z-selection-corner);
  }
  .selection > .handle.bottom.left {
    cursor: nesw-resize;
    z-index: var(--z-selection-corner);
  }

  .selection > .handle.top.left {
    z-index: var(--z-selection-corner);
    cursor: nwse-resize;
  }
  .selection > .handle.bottom.right {
    z-index: var(--z-selection-corner);
    cursor: nwse-resize;
  }
  [data-selecting] .selection,
  [data-selecting] .selection > .handle {
    visibility: visible;
    pointer-events: none;
  }
}
