/*{{{1 @property */
@property --pixelw {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --pixelh {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --naturalw {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --naturalh {
  syntax: '<number>';
  inherits: true;
  initial-value: 0;
}
@property --displayw {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --displayh {
  syntax: '<length>';
  inherits: true;
  initial-value: 0;
}
@property --dot-c {
  syntax: '<color>';
  inherits: false;
  initial-value: #fff;
}
@property --circle-c {
  syntax: '<color>';
  inherits: false;
  initial-value: #fff;
}
@property --dot-r {
  syntax: '<number>';
  inherits: false;
  initial-value: 0.2;
}
@property --circle-ri {
  syntax: '<number>';
  inherits: false;
  initial-value: 0.3;
}
@property --circle-ro {
  syntax: '<number>';
  inherits: false;
  initial-value: 0.4;
}
/*}}}1*/

@media not print {
  :root {
    color: #eee;
    background-color: #222;
    background-image: linear-gradient(#141414, #1a1a1a, #141414);
    background-size: 100% 100%;
    background-position: 50% 50%;
    contain: size;
    container: imgonlychild size;
    --naturalmax: max(var(--naturalw), var(--naturalh));
    --naturalmin: max(var(--naturalw), var(--naturalh));

    /* --pixelw: calc(50vmin / var(--naturalw)); */
    /* --pixelh: calc(50vmin / var(--naturalh)); */
    /*       --pixelh: calc(50vh / var(--naturalh)); */
    /* --displayw: 50vmin; */
    /* --displayh: 50vmin; */
    /* --displayw: min(50vw, var(--pixelw)); */
    --maxfitw: 0.7;
    --maxfith: 0.7;
    --h-if-fitw: calc(
      ((var(--maxfitw) * 100vw) / var(--naturalw)) * var(--naturalh)
    );
    --w-if-fith: calc(
      ((var(--maxfith) * 100vh) / var(--naturalh)) * var(--naturalw)
    );
    --w-if-fitw: calc(var(--maxfitw) * 100vw);
    --h-if-fith: calc(var(--maxfith) * 100vh);

    --displayw: min(var(--w-if-fitw), var(--w-if-fith));
    --displayh: min(var(--h-if-fitw), var(--h-if-fith));
    --pixelh: calc(var(--displayh) / var(--naturalh));
    --pixelw: calc(var(--displayw) / var(--naturalw));

    --imtop: calc(50vh - (var(--displayh) * 0.5));
    --imbottom: calc(50vh + (var(--displayh) * 0.5));
    --imleft: calc(50vw - (var(--displayw) * 0.5));
    --imright: calc(50vw + (var(--displayw) * 0.5));
  }
  :root:has(.tgl.sun :checked) {
    color: #222;
    background-color: #ddd;
    background-image: linear-gradient(#eaeaea, #eeeeee, #eaeaea);
  }
  :root:has(.tgl.tch :checked) {
    background-image: repeating-conic-gradient(
      from 0deg at 50% 50%,
      #606060 0 90deg,
      #585858 90deg 180deg
    );

    background-size: 40px 40px;
  }
  :root:has(.tgl.sun :checked):has(.tgl.tch :checked) {
    background-image: repeating-conic-gradient(
      from 0deg at 50% 50%,
      #909090 0 90deg,
      #a8a8a8 90deg 180deg
    );
  }

  /* Pixel mode */
  /* :root:has(> img.transparent):has(.tgl.pix :checked)::after { */
  /*   opacity: 0; */
  /* } */

  :root:has(.tgl.pix :checked) {
    background-image:
      linear-gradient(#1a1a1a44, #14141466, #1a1a1a66),
      repeating-conic-gradient(#444 0 90deg, #333 90deg 180deg);
    background-size:
      100vw 100vh,
      calc(var(--pixelw) * 2) calc(var(--pixelw) * 2);
    background-repeat: no-repeat, repeat;
    background-position:
      0 0,
      var(--imleft) var(--imtop);
  }
  :root:has(.tgl.pix :checked):has(.tgl.sun :checked) {
    background-image:
      linear-gradient(#1a1a1a44, #14141466, #1a1a1a66),
      repeating-conic-gradient(#555 0 90deg, #333 90deg 180deg);
    background-size:
      100vw 100vh,
      calc(var(--pixelw) * 2) calc(var(--pixelw) * 2);
    background-repeat: no-repeat, repeat;
    background-position:
      0 0,
      var(--imleft) var(--imtop);
  }

  /*{{{1 Thin-lined grid pixel hint */
  :root:has(.tgl.pix :checked):has(.tgl.grid :checked)::after {
    pointer-events: none;
    content: '';
    display: block;
    position: fixed;
    top: var(--imtop);
    left: var(--imleft);
    width: var(--displayw);
    height: var(--displayh);
    box-sizing: content-box;
    --gridlinehalfthickness: 0.6px;
    --gridlinefadeover: 0.2px;

    --glt: var(--gridlinehalfthickness);
    --glf: var(--gridlinefadeover);
    background:
      repeating-linear-gradient(
        to bottom,
        /*blue*/ var(--gch2) 0 var(--glt),
        #0000 calc(var(--glt) + var(--glf)) var(--pixelw)
      ),
      repeating-linear-gradient(
        to bottom,
        /*red*/ var(--gch1) 0 var(--glt),
        #0000 calc(var(--glt) + var(--glf)) var(--pixelw)
      ),
      repeating-linear-gradient(
        to right,
        /*yellow*/ var(--gcv1) 0 var(--glt),
        #0000 calc(var(--glt) + var(--glf)) var(--pixelw)
      ),
      repeating-linear-gradient(
        to left,
        /*cyan*/ var(--gcv2) 0 var(--glt),
        #0000 calc(var(--glt) + var(--glf)) var(--pixelw)
      );
    background-position: 0 0;
    background-size: var(--pixelw) var(--pixelw);
    --gch1: var(--gridcolor);
    --gch2: var(--gridcolor);
    --gcv1: var(--gridcolor);
    --gcv2: var(--gridcolor);
  }
  :root:has(.tgl.pix :checked):has(.tgl.sun :checked):has(
      .tgl.grid :checked
    )::after {
    --gridcolor: #3331;
  }
  :root:has(.tgl.pix :checked):has(.tgl.dbg :checked)::after {
    --gch1: #f00a;
    --gch2: #00fa;
    --gcv1: #ff0a;
    --gcv2: #0ffa;
  }
  /*}}}1*/

  /* Background for images with transparency */
  img.transparent {
    background: #68686844;
  }
  :root:has(.tgl.sun :checked) img.transparent {
    background: #78787844;
  }

  /* outline around image */
  :root:has(.tgl.out :checked) img.transparent {
    background: #0000;
    outline: 1px dashed #888;
  }
  :root:has(.tgl.sun :checked):has(.tgl.out :checked) img.transparent {
    outline: 1px dashed #aaa;
  }

  /* hatched box background */
  :root:has(.tgl.tch :checked) img.transparent {
    background-image: repeating-conic-gradient(
      #383838 0 90deg,
      #484848 90deg 180deg
    );
    background-size: var(--pixelw) var(--pixelw);
    background-repeat: repeat;
    background-position: 0 0;
    border: 0;
    padding: 0;
  }
  :root:has(.tgl.sun :checked):has(.tgl.tch :checked) img.transparent {
    background-image: repeating-conic-gradient(
      #686868 0 90deg,
      #787878 90deg 180deg
    );
    background-size: var(--pixelw) var(--pixelw);
    background-repeat: repeat;
    background-position: 0 0;
    border: 0;
    padding: 0;
  }

  .output {
    visibility: hidden;
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    font-size: 0.8em;
    font-family: Menlo, monospace;
    color: var(--color);
    white-space: pre;
    text-align: center;
    line-height: 1.8;
    pointer-events: none;
    user-select: none;
  }
  .output.one > output::after {
    counter-reset: out var(--value);
    content: var(--prefix, '') counter(out) var(--suffix, '');
  }
  .output.two > output::after {
    counter-reset: outA var(--value) outB var(--value2);
    content: var(--prefix, '') counter(outA) var(--suffix, '')
      var(--prefix2, '') counter(outB) var(--suffix2, '');
  }

  /* debug labels for image fitting to client */
  :root:has(.tgl.dbg :checked) :is(.output.fitw, output.fith) {
    visibility: visible;
  }
  .output.fitw,
  .output.fith {
    display: block;
    pointer-events: none;
    position: fixed;
    border-radius: 12px 2px 2px 2px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    filter: drop-shadow(1px 1px 1px #000a);
    border-style: solid;
    box-sizing: border-box;
  }
  .output.fith {
    border-width: 1px 3px 1px 3px;
    color: #b00;
    width: var(--w-if-fith);
    height: var(--h-if-fith);
  }
  .output.fitw {
    border-width: 3px 1px 3px 1px;
    width: var(--w-if-fitw);
    height: var(--h-if-fitw);
    color: #a48200;
  }
  .output.fitw::after,
  .output.fith::after {
    position: absolute;
    top: 0;
    left: 0;
    border: 2px solid currentColor;
    background-color: #000;
    padding: 4px 6px;
    border-radius: 12px 0 14px 0;
    border-style: solid groove groove solid;
    font-family: monospace;
    font-size: 0.8rem;
    letter-spacing: -0.08ch;
  }
  .output.fitw::after {
    margin: -2px 0 0 -1px;
    border-width: 2px 1.5px 1.5px 1px;
    content: 'fit w';
  }
  .output.fith::after {
    margin: -1px 0 0 -2px;
    border-width: 1px 1.5px 1.5px 2px;
    content: 'fit h';
  }

  /* labels for image width and height */
  :root:has(.tgl.dim :checked) :where(.output.width, .output.height) {
    visibility: visible;
  }
  .output.width,
  .output.height {
    --color: #888;
    --thickness: 2px;
    --endlength: calc(var(--thickness) * 5);
    --suffix: 'px';
  }
  .output.width {
    --prefix: 'width ';
    --value: var(--naturalw);
    /* top: calc(var(--imtop) - 1lh - var(--endlength)); */
    left: var(--imleft);
    width: var(--displayw);
    padding-bottom: var(--endlength);
    background-repeat: no-repeat;

    bottom: var(--imbottom);
    background-image:
      linear-gradient(to top, var(--color) 0 var(--thickness), #fff0 0),
      linear-gradient(
        to right,
        var(--color) 0 var(--thickness),
        #fff0 var(--thickness) 100%
      ),
      linear-gradient(
        to left,
        var(--color) 0 var(--thickness),
        #fff0 var(--thickness) 100%
      );
    background-position:
      center center,
      right center,
      left center;
    background-size:
      100% var(--thickness),
      100% calc(var(--endlength) - var(--thickness)),
      100% calc(var(--endlength) - var(--thickness));
    height: calc(var(--endlength) * 3);
    right: var(--imright);
    overflow: visible;
  }
  .output.height {
    --prefix: 'height\0a ';
    --value: var(--naturalh);
    --suffix: 'px';
    top: var(--imtop);
    right: var(--imright);
    height: var(--displayh);
    padding-right: calc(var(--endlength) * 2);
    background-image:
      linear-gradient(to left, var(--color) 0 var(--thickness), #fff0 0),
      linear-gradient(to bottom, var(--color) 0 var(--thickness), #fff0 0),
      linear-gradient(to top, var(--color) 0 var(--thickness), #fff0 0);
    background-repeat: no-repeat;
    width: calc(var(--endlength) * 3);
    background-position: center center;
    background-size:
      var(--thickness) 100%,
      calc(var(--endlength) - var(--thickness)) 100%,
      calc(var(--endlength) - var(--thickness)) 100%;
    justify-content: end;
  }

  .output.client-size {
    --color: #888;
    --endlength: 0.5lh;
    --thickness: 2px;
    --prefix: 'viewport:\0a ';
    --value: var(--screenw);
    --suffix: '×';
    --value2: var(--screenh);
    --suffix2: 'px';
    top: 4px;
    left: 4px;
  }
  :root:has(.tgl.dim :checked) :where(.output.client-size) {
    visibility: visible;
  }

  /* the subject image */
  img {
    text-align: center;
    position: absolute;
    inset: 0;
    margin: auto;
  }
  /**
   * classes set by the browser to describe the image:
   *  .overflowingVertical  (zoomed in)
   *  .transparent          (background)
   */
  img.overflowingVertical {
    margin-top: 0;
  }

  .completeRotation {
    transition: transform 0.3s ease 0s;
  }

  /**
   * classes set by companion userscript to describe the image:
   *  .tiny            (h + w < 200)
   *  .transparent     (background)
   */
  /* images below a threshold size optimised for pixel graphics */
  .tiny {
    width: var(--displayw);
    height: var(--displayh);
    image-rendering: pixelated;
  }

  /*{{{1 Toggle controls */
  .toggles {
    position: absolute;
    top: 0;
    left: 0;
    color: #eee;
    list-style-type: none;
    padding: 0;
    margin: 0 0;
    display: flex;
    flex-direction: row;
    column-gap: 1ch;
    font-family: monospace;
    font-size: 0.9rem;
    transition: opacity var(--long-duration) ease var(--long-delay);
    --long-delay: 2s;
    --short-delay: 100ms;
    --long-duration: 600ms;
    --short-duration: 80ms;
  }
  .toggles > .tgl {
    opacity: 0;
    pointer-events: none;
    margin: 0;
    transition: opacity var(--long-duration) ease var(--long-delay);
    outline: none;
  }
  .toggles:hover > .tgl {
    opacity: 1;
    pointer-events: all;
    cursor: pointer;
    transition: opacity var(--short-duration) ease var(--short-delay);
  }
  .toggles::before {
    content: '{…}';
    position: absolute;
    top: 0;
    left: 0;
    min-width: 10vw;
    min-height: 4vh;
    padding: 1ch 0.5ch;
    opacity: 0.7;
    transition: opacity var(--short-duration) ease
      calc(var(--short-delay) + var(--long-delay));
  }
  .toggles:hover::before {
    content: '{…}';
    opacity: 0;
    transition: opacity var(--short-duration) ease var(--short-delay);
  }

  li {
    padding: 0;
    margin: 0;
    border: none;
  }
  .toggles {
    font-size: 0.8rem;
    padding: 2px 0 0 2px;
    row-gap: 2px;
    flex-direction: column;
    row-gap: 1px;
    align-items: stretch;
    justify-content: center;
  }
  .toggles::before {
    width: 100%;
    height: 100%;
  }
  .toggles:hover::before {
    pointer-events: none;
  }

  .tgl {
    display: flex;
    align-items: center;
    justify-content: center;
    outline: none;
    user-select: none;
  }
  .tgl input {
    display: flex;
    align-items: center;
    justify-content: right;
    cursor: pointer;
  }
  .tgl input[type='checkbox'],
  .tgl input[type='radio'] {
    display: none;
  }
  .tgl label {
    display: flex;
    align-items: center;
    cursor: pointer;
    padding: 0.1rem 0 0.1rem 0.3rem;
    border-radius: 0.3rem 1rem 1rem 0.3rem;
    background-color: #222a;
    border: 1px solid #777a;
    flex: 1 1 100%;
    justify-content: space-evenly;
  }
  .tgl label::after {
    justify-self: end;
  }
  .tgl label:has(> [type='checkbox']:disabled),
  .tgl label:has(> [type='radio']:disabled) {
    color: #999;
    cursor: not-allowed;
  }

  .tgl label:has(> [type='checkbox']) {
    --fade: 0.5px;
    --dot-r: 0.2;
    --circle-ri: 0.3;
    --circle-ro: 0.4;
    --dr: calc(var(--dot-r) * var(--u));
    --cri: calc(var(--circle-ri) * var(--u));
    --cro: calc(var(--circle-ro) * var(--u));
    --dot-c: currentColor;
    --circle-c: currentColor;
    --u: 1rem;
    text-align: center;
    flex: 1 0 auto;
    justify-content: space-between;
    align-items: center;
    background-color: #222;
    border-color: #000;
    box-shadow:
      inset -2px -3px 4px -2px #000,
      inset 1px 2px 4px -1px #666a;
  }
  .tgl label:has(> [type='checkbox']) {
    border-radius: 2px;
  }
  .tgl label:has(> [type='checkbox']):hover {
    box-shadow:
      inset -2px -3px 4px -2px #0a0303,
      inset 1px 2px 4px -1px #c02626;
    border-color: #222 #2a2a2a #2a2a2a #222;
    background-color: #2e0f0f;
  }
  .tgl label:has(> [type='checkbox'])::after {
    padding: 1px 0.4rem 1px 0;
    margin-left: 0.5ch;
    width: auto;
    height: 1lh;
    aspect-ratio: 1;
    box-sizing: content-box;
    display: flex;
    align-items: center;
    justify-content: center;
    line-height: normal;
    content: '';
    --dot-c: transparent;
    background-image: radial-gradient(
      circle at center,
      var(--dot-c) 0 calc(var(--dr) - var(--fade)),
      transparent calc(var(--dr) + var(--fade)) calc(var(--cri) - var(--fade)),
      var(--circle-c) calc(var(--cri) + var(--fade))
        calc(var(--cro) - var(--fade)),
      transparent calc(var(--cro) + var(--fade)) 100%
    );
    transition: background-image 100ms ease 50ms;
    transition-property: --dot-c, --dot-r;
  }
  .tgl label:has(> [type='checkbox']):hover::after {
    --dot-c: #999;
    --dot-r: 0.14;
    transition: all background-image 100ms ease 50ms;
  }
  .tgl label:has(> [type='checkbox']:checked)::after {
    --dot-c: currentColor;
    --dot-r: 0.2;
    transition: all 100ms ease 50ms;
  }
  .tgl label:has(> [type='checkbox']:checked):hover::after {
    --dot-c: currentColor;
    --dot-r: 0.14;
    transition: all 100ms ease 50ms;
  }
  .tgl label:has(> [type='checkbox']):active::after {
    --dot-c: #fff;
    --dot-r: 0.2;
    --circle-ri: 0.28;
    --circle-ro: 0.42;
    transition: all 100ms ease 50ms;
  }
  .tgl label:has(> [type='checkbox']:checked):active::after {
    --dot-c: #fff;
    --dot-r: 0.2;
    --circle-ri: 0.28;
    --circle-ro: 0.42;
    transition: all 100ms ease 50ms;
  }
  .tgl label:has(> [type='checkbox']:disabled)::after {
    --circle-c: #aaa;
    --dot-c: #333;
    --dot-r: 0.25;
    transition: all 100ms ease 50ms;
  }
  .tgl label:has(> [type='checkbox'])::before {
    content: '';
    width: 0.5ch;
  }

  .tgl.plain label:has(> [type='checkbox'])::after {
    content: '◯';
  }
  .tgl.plain label:has(> [type='checkbox']:checked)::after {
    content: '◉';
  }
  .tgl.plain label:has(> [type='checkbox']:disabled)::after {
    content: '◌';
  }
  /*}}}1*/

  .breadcrumbs output::after {
    content: '';
  }
  .breadcrumbs {
    visibility: visible;
    font-size: 0.6rem;
    pointer-events: all;
    padding: 1px 10px 2px 10px;
    right: 0;
    top: 0;
    border-radius: 0 0 0 10px;
  }
  .breadcrumbs > ul {
    margin: 0;
    padding: 0;
    list-style-type: none;
    display: flex;
    align-items: center;
    user-select: all;

    --＋: 0.5px;
    --－: calc(var(--＋) * -1);
    --＝: 0;
    --🔸: 0px #000a;
    --text-outline-thin:
      var(--＋) var(--＝) var(--🔸), var(--＋) var(--＋) var(--🔸),
      var(--＝) var(--＋) var(--🔸), var(--－) var(--＋) var(--🔸),
      var(--－) var(--＝) var(--🔸), var(--－) var(--－) var(--🔸),
      var(--＝) var(--－) var(--🔸), var(--＋) var(--－) var(--🔸);
  }
  .breadcrumbs > ul > li {
    text-shadow: var(--text-outline-thin);
    color: #fff;
    letter-spacing: 0.06ch;
  }
  .breadcrumbs > ul > li > a {
    text-decoration: 0.5px solid underline;
    text-underline-offset: 2px;
    color: #83e1fe;
    cursor: pointer;
    text-shadow: var(--text-outline-thin);
  }
  .breadcrumbs > ul > li > a:hover {
    text-decoration: 1px solid underline;
    text-underline-offset: 1.5px;
  }
  .breadcrumbs > ul > li > a:active {
    text-decoration: 1px dashed underline;
    text-decoration-color: #f00;
  }
  .breadcrumbs > ul > li > a:visited {
    color: #83e1fe;
  }
  .sep {
    padding: 0 0.1ch 0 0.2ch;
    font-size: 0.7rem;
    text-shadow: var(--text-outline-thin);
  }
  .proto {
    text-shadow: var(--text-outline-thin);
  }
  .proto + .sep {
    padding: 0 0.3ch 0 0;
  }

  body .toggles {
    pointer-events: none;
    z-index: 2;
    position: fixed;
  }
  body:hover .toggles,
  .toggles:hover {
    pointer-events: all;
  }

  body .toggles::before {
    pointer-events: none;
    z-index: 2;
    opacity: 0;
    transition: opacity 120ms ease 200ms;
    padding: 1ch 0 0 0.5ch;
    width: auto;
    height: auto;
  }
  body:hover .toggles::before,
  .toggles:hover::before {
    opacity: 0.6;
    transition: opacity 2000ms ease 200ms;
  }
  .toggles:hover::before {
    opacity: 1;
    transition: opacity 120ms ease 0ms;
  }
}
